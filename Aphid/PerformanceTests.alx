#'Std';
#'Meta';
using Components.Aphid;
using System.Diagnostics;

tests = {};

extend list AphidExpression {
    whereId: @(l, id) l-?@(x) x.isId() && x.id() == id,

    singleId: @(l, id) {
        matches = l-?@(x) x.isId() && x.id() == id;


        if (matches.Count != 1) {
            fatal("Expected single expression with id '{0}'.", id);
        }

        ret matches[0];
    },

    replaceId: @(l, id, block) {
        using System.Linq;
        matches = l.whereId(id);

        for (m in matches) {
            i = l.IndexOf(m);
            l.RemoveAt(i);
            l.InsertRange(i, block.Body);
        }
    }
}

#'Std';
benchmark = macro(@(name, iterations, prologue, action, epilogue) {
    using System.Linq;
    using System.Collections;

    if (action.Body.Count != 1) fatal('Action must be single statement.');

    template = @{
        @{
            using System;
            namePlaceholder;
            print('Running ~Cyan~{0}~R~ performance tests', n);
            sw = new Stopwatch();
            sw.Start();
            placeholder;
            sw.Stop();
            
            print(
                'Finished ~Cyan~{0}~R~ performance test complete in ~Magenta~{1}~R~',
                n,
                sw.Elapsed);
        }
    };

    print('Mutating template');

    benchmarkFunc = template.Body[0].ToString() |> parseExp |> evalExp;
    benchmarkFunc.Body.InsertRange(0, prologue.Body);
    benchmarkFunc.Body.AddRange(epilogue.Body);

    benchmarkFunc.Body.replaceId(
        'namePlaceholder',
        '@{ n = "' + name + '" }' |> parseExp |> evalExp);

    actionBlock = '@{}' |> parseExp |> evalExp;
    actionStmt = action.Body[0];
    
    ArrayList
        .Repeat(actionStmt, iterations)
        .ToArray(typeof(AphidExpression))
        |> actionBlock.Body.AddRange;

    benchmarkFunc.Body.replaceId('placeholder', actionBlock);

    tests.{name + 'Benchmark'} = benchmarkFunc;
});

head('Starting performance tests');

benchmark(
    'increment',
    10000000,
    @{
        print('Starting increment test');
        i = 0;
    },
    @{ i++ },
    @{ print('Final value: {0}', i) });

print('Calling benchmark function');
tests.incrementBenchmark();
print('Done calling benchmark function');