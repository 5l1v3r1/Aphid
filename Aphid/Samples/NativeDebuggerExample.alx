#'Std';

if (!getCommand().EndsWith('-crash')) {
    #'Debugging\\NativeDebugging';
    print('Starting process under debugger');
    var cmd = getCommand() + ' -crash';
    var getOp = @() $($_) 0: 'read', 1: 'write', 8: 'execute', 'unknown';

    debugCommand(
        cmd,
        {
            exception: @(sender, e) {
                var fmt = '~Red~{0}~R~ encountered at ~Yellow~0x{1:x8}~R~';
                var er = e.DebugEvent.Exception.ExceptionRecord;

                if (er.ExceptionCode != 0xc0000005) {
                    print(fmt, e.ToString(), er.ExceptionAddress);
                } else {
                    print(
                        fmt + ', attempted ~Magenta~{2}~R~ to ~Yellow~0x{3:x8}~R~',
                        e.ToString(),
                        er.ExceptionAddress,
                        er.ExceptionInformation[0] |> getOp,
                        er.ExceptionInformation[1]);
                }
            },
        });

    print('~Green~Done~R~');
} else {
    using System.Runtime.InteropServices;
    var a = 0xdeadbeef;
    a |> Convert.ToUInt32 @print('Crashing with write to address ~Cyan~0x{0:x8}~R~');

    // Hack to bypass .NET checks and create 32-bit IntPtr greater than 0x7fffffff so
    // 0xdeadbeef can be used
    var p = 0x4 |> Marshal.AllocHGlobal;
    Marshal.Copy(a |> Convert.ToUInt32 |> BitConverter.GetBytes, 0, p, 4);

    // Trigger write access violation
    0x52 @Marshal.WriteByte(p |> Marshal.ReadIntPtr);
}