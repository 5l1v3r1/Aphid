#'Std';
#'Meta';
#'List';
#'Query';
using System.Diagnostics;
using System.Linq;
using System.IO;
using System.Reflection;
cls();

head('Merging .NET Program');

[ 'AphidPortable', 'ildasm' ]->@()Process.GetProcessesByName($_)->@() { $_.Kill(); $_.WaitForExit() };

// ignore = [
//     'Aphid.exe',
//     'Components.Aphid.dll',
//     'mscorlib.dll',
//     'System.dll',
//     //'System.Web.Extensions.dll',
//     //'System.Web.dll',    
//     'System.Xml.dll',
//     //'System.Core.dll',
// ];
//dumpe('foo');
//AppDomain.CurrentDomain.GetAssemblies()->@.Location |> dumpe;
//
//asms = Assembly
    //.GetExecutingAssembly()
    //.GetReferencedAssemblies()
    //->(@() $_.FullName |> Assembly.Load @.Location)
    //@aq.concat(AppDomain.CurrentDomain.GetAssemblies()->@.Location)
    //-?(@(a) !ignore.any(@()a.ToLower().Contains($_.ToLower())))
    //!?
    //->Path.GetFileName;
//
    //dumpe(asms);


_facade = macro(@(f) {
    'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\Facades\\' + f
});


asms = [
    // 'Microsoft.CSharp.dll',
    // 'System.Data.Linq.dll',
    // 'System.Xml.Linq.dll',
    // 'System.Web.dll',
    // 'System.Web.Extensions.dll',
    // 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6\\Facades\\System.Linq.dll',
    // 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6\\Facades\\System.Linq.Expressions.dll',
    // 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6\\Facades\\System.Linq.Parallel.dll',
    // 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6\\Facades\\System.Linq.Queryable.dll',
] !?;

flags = '/ndebug /zeroPeKind';

//dumpe(asms);

getILMerge = @() Directory
    .GetFiles('.\\', 'ilmerge.exe', SearchOption.AllDirectories)
    |> Enumerable.FirstOrDefault;
    
ilmergeExe = getILMerge();

if (ilmergeExe == null) {
    print('Loading NuGet.Core');
    
    if (load NuGet.Core == null) {
        fatal('Failed loading Nuget.Core');
    }

    using NuGet;

    print('Connecting to repository');
    repo = PackageRepositoryFactory.Default.CreateRepository("https://packages.nuget.org/api/v2");
    packageManager = new PackageManager(repo, '.\\');

    print('Installing package ILMerge');
    packageManager.InstallPackage('ILMerge');
    ilmergeExe = getILMerge();

    if (ilmergeExe == null) {
        fatal('Could not find ilmerge.exe');
    }

    :> 'ILMerge installed';
} else {
    :> 'ILMerge already installed';
}

//asms = AppDomain.CurrentDomain.GetAssemblies()-<(@() $_.GetReferencedAssemblies())->@.Codebase;

out = 'AphidPortable.exe';

#'Query';
#'List';
using System.Linq;
asmList = asms
    // -?(@()
    //     //!$_.Location.Contains('Aphid.exe')) //&& 
    //     !$_.Location.Contains('mscorlib') &&
    //     $_.Location.Contains('System'))
        //0xdeadb);
    ->(@() '"{0}"' :: $_)
    !?;

asmList |> dump;

head('Getting asm list');
print('~Cyan~Asms:~R~ {0}', asmList);

libPaths = (asms->Path.GetDirectoryName!?->@() '/lib:"{0}"' :: $_) @join(' ');
libPaths = '';
//dotNetDir = asms-?(@()$_.Contains('Windows')) |> aq.first |> Path.GetDirectoryName;
    
systemPath = 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6';

File.WriteAllText('c:\\temp\\log.txt', '');
args =
    '/out:{0} Aphid.exe /target:{1} {2} /targetplatform:v4.5,"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6" Components.Aphid.dll {3} {4} /log:c:\\temp\\log.txt' :: [
        out,
        Path.GetExtension(out).Substring(1),
        libPaths,
        flags,
        asms
            ->(@() $_.Contains('\\') ? $_ : Path.Combine(systemPath, $_))
            ->(@() '"{0}"' :: $_)
            @join(' ')
    ];

args @print('Starting ilmerge.exe with args ~Magenta~{0}~R~');

si = new ProcessStartInfo(ilmergeExe, args);   
si.UseShellExecute = false;
p = Process.Start(si);
p.WaitForExit();



failure = 
    'c:\\temp\\log.txt'
    |> File.ReadAllText
    @()
        $_.Contains('was not merged in correctly. It is still listed as an external reference in the target assembly') ||
        $_.Contains('Duplicate assembly name ') ||
        $_.Contains('ILMerge.Merge: ERROR');

if (failure) {
    print('~Red~Failed merging dll~R~');
    'c:\\temp\\log.txt' |> File.ReadAllText |> Console.WriteLine;
    exit(1);
}

//Process.Start('ildasm', 'AphidPortable.exe');
Process.Start('c:\\temp\\log.txt');

new FileInfo('AphidPortable.exe') @.Length @print('Asm size: ~Cyan~{0:n0}~R~');


Process.Start('AphidPortable.exe');

// head('Starting ngen');

// si.FileName = 'ngen';
// si.Arguments = 'install AphidPortable.exe';
// p = Process.Start(si);
// p.WaitForExit();