#'Std';
#'System/Process';
#'Cli/Powershell';

using System.IO;
using System.Text;

var args = new List[string](Environment.GetCommandLineArgs());
var backupDB = args.Contains('-backup');
var useSingleProcess = args.Contains('-inproc');

var ignore = [
    '581bb73 Updated interop type caching to use hash sets.'
];

var config = 'Release';
var root = Path.Combine(Path.GetDirectoryName(this['$script']), '..', '..') |> Path.GetFullPath;
var testRoot = Path.Combine(root, '..', 'AphidBenchMark') |> Path.GetFullPath;
var csProj = testRoot + '\\Aphid\\Aphid.csproj';
var benchRel = '\\Aphid\\Benchmarks';
var testSrc = root + benchRel;
var testDst = testRoot + benchRel;
var bin = '\\bin\\' + config;
var testBin = testRoot + '\\Aphid' + bin;
var testBin2 = testRoot + '\\Components.Aphid' + bin;
var exe = testBin + '\\Aphid.exe';
var test = exe + (useSingleProcess ? ' run2.alx' : ' run.alx');
var tmpDir = testSrc + '\\BenchmarkTemp';
var cd = @Directory.SetCurrentDirectory(testRoot);

var init = @{
    if (Directory.Exists(testRoot)) {
        cd();
        #> 'git fetch --all';        
        #> 'git reset --hard origin/master';
        #> 'git pull';
    } else {
        #> ('git clone https://github.com/John-Leitch/Aphid.git ' + testRoot);
        cd();
    }
    
    #> ('cmd /c mkdir ' + tmpDir);
    #> ('cmd /c del ' + testDst + '\\history.* /q');
};

printQuery('Searching for MSBUILD');

var msBuild = [
        "c:\\program files (x86)",
        "d:\\program files (x86)"
    ]
    -<(@()psContext.exec('dir "{0}" msbuild.exe -r'::$_))
    ->@.FullName
    ->FileVersionInfo.GetVersionInfo
    -&@.FileVersion
    -/@.Key
    ^!
    -/(@()$_.FileName.ToLower().Contains('amd64'))
    ^!
    @.FileName;

if (!File.Exists(msBuild)) {
    printError('Could not find MSBUILD');
    exit(0xbad80);
}

printSuccess('Found MSBUILD at ~Cyan~{0}~R~', msBuild);

var run = @{
    var hasExe = @File.Exists(exe);

    //[ testRoot ]
        //->@(f) [' /ah ', '']
            //->@() #> ('cmd /c del ' + f + '\\*.alx.cache* /s /q' + $_);

    [ 'aphid*.exe', 'components*.dll', '*.alx' ]
        ->@(p) [ testBin, testBin2 ]
            ->@(f) [' /ah ', '']
                ->@() #> ('cmd /c del ' + f + '\\' + p + ' /s /q' + $_);

    head('Running MSBuild');

    var msbc = '"' + msBuild +'" ' + 
        csProj + ' ' +
        (((csProj  |> File.ReadAllText) ~= 'Release\\|Default') ? '/p:Platform= ' : '') +
        '/p:Configuration=' + config + ' ' +
        '/verbosity:quiet';
    
    #> msbc;

    head('MSBuild Complete');
    
    if (hasExe()) {
        head('Test Fixup');
        #> ('cmd /c copy ' + testSrc + '\\*.alx ' + testDst + ' /y');        
        #> ('cmd /c del ' + testRoot + '\\*.alx.cache* /s /q');
        #> ('cmd /c del ' + testRoot + '\\*.alx.cache* /s /q /ah');
        #> ('cmd /c mkdir ' + testBin + '\\Library\\Testing');
        //#> ('cmd /c copy ' + testBin + '\\Library\\Benchmarks.alx ' + testBin + '\\Library\\Testing\\Benchmarks.alx /y');
        //#> ('cmd /c copy ' + testBin + '\\Library\\Benchmark.alx ' + testBin + '\\Library\\Testing\\Benchmark.alx /y');
        #> ('cmd /c del ' + testBin + '\\Library\\Testing\\Benchmark.alx /q');
        #> ('cmd /c copy ' + root + '\\Components.Aphid\\Library\\Testing\\Benchmark.alx ' + testBin + '\\Library\\Testing\\Benchmark.alx /y');
        
        [testBin, testDst]->@()
            Directory.GetFiles($_, '*.alx', SearchOption.AllDirectories)->@(f){
                printInfo('Fixing {0}', f);
                var txt = f |> File.ReadAllText;
                var bad = "#'c:\\\\source\\\\Aphid\\\\Components.Aphid\\\\Aphid.Tokens.alx';";

                if (txt.Contains(bad)) {
                    print('Bad include detected');
                    txt = txt.Replace(bad, '');
                    File.WriteAllText(f, txt);
                }                
            };
        
        head('Running Benchmarks');
        Directory.SetCurrentDirectory(testDst);
        printInfo(test);
        //Console.ReadLine();
        #> test;
        head('Done running Benchmarks');
        #> ('cmd /c copy ' + testDst + '\\history.* ' + tmpDir + ' /y');

        if (backupDB) {
            var backupDir = tmpDir + '\\' + Guid.NewGuid();
            #> ('cmd /c mkdir ' + backupDir);
            #> ('cmd /c copy ' + testDst + '\\history.* ' + backupDir);
        }
        //Console.ReadLine();
    }

    ret rollBack();
};

var sb = new StringBuilder();

var rollBack = @{
    cd();
    
    var tries = 0;
    var every = 1;
    var csMatches = 0;

    while (true) {
        cd();
        #> 'git reset --hard HEAD~1';

        sb.Clear();
        'git show --name-only --oneline' ~> sb.AppendLine;

        var s = sb.ToString();
        var s2 = s |> Cli.StyleEscape;
        
        if (ignore =? s.StartsWith) {
            print('Ignoring:\r\n~Red~{0}~R~', s2);
        } else if (s.ToLower() ~= 'components\\.aphid[\\/].*?\\.cs([\\r\\n]|$)') {
            print('C# changes found for Components.Aphid:\r\n~Green~{0}~R~', s2);

            if (++csMatches < every) {
                print('~Yellow~Skipping match {0}~R~', csMatches);
                continue;
            }
            
            #> ('cmd /c copy ' + tmpDir + '\\history.* ' + testDst + ' /y');

            ret true;
        } else {
            print('No C# changes found for Components.Aphid:\r\n~Yellow~{0}~R~', s2);
        }
        
        if (++tries == 100) {
            print('No more CS changes found, exiting');

            ret false;
        }
    }
};

init();

while (run()) {
    
}
