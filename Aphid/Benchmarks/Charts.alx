#'Std';
#'Gui\\WinForms';
#'Charts.Config';
using Components.ObjectDatabase;
using System.Reflection;
using Components.Aphid.Parser;

AppDomain.CurrentDomain.add_AssemblyResolve(@(sender, e){
    ret e.Name.StartsWith('Components.Aphid') ? AphidExpression.Assembly : null;
});

var chart = winForms.chart();
var area3d = chart.area().Area3DStyle;
area3d.Enable3D = true;
area3d.Inclination = 10;
area3d.IsRightAngleAxes = true;
area3d.Perspective = 0;
area3d.PointDepth = 50;
area3d.Rotation = 10;
area3d.WallWidth = 2;
area3d.LightStyle = LightStyle.Realistic;

var tickMode = { normal: 0, sum: 1, average: 2, min: 3 };
var mode = tickMode.normal;
var args = new List[string](Environment.GetCommandLineArgs());

_af = macro(@(flag) {
    if (args.Contains('-' + quote(flag))) {
        if (mode != tickMode.normal) {
            printError('Cannot specify more than one grouping flag.');
            exit(0xbad0f);
        }

        mode = tickMode.flag;
    }
});

_af(average);
_af(min);
_af(sum);

var l = {};


using (var db = 'history.db' |> BinaryObjectDatabase.OpenFile) {
    var flattened =
        (var r = db.ReadUnsafe)()
        -<(@(x) x.results -> @(y) ({ version: new Version(x.version), name: y.name, ticks: y.ticks }));

    if (!args.Contains('-all')) {
        flattened = flattened-?((@.name) @> testNames.contains);
    }

    var fullRuns = flattened -& (@.version) -& (@()$_ -& @.name #!) -/ @.Key ^! -> @.Key;

    _aggr = macro(@(_aggr) { s -& (@.version) -\ (@.Key) -> (@(g) [ i++, g -> @.ticks |> @() _aggr, g.Key ]) });

    flattened
    -? (@(x) fullRuns=?@==x.version)
    -& @.name
    -> @(s){
        var i = 0x0;
        var data = ($(mode)
            tickMode.average: _aggr(($_ +> (@(a, b) a + b)) / (g #!)),
            tickMode.sum: _aggr($_ +> (@(a, b) a + b)),
            tickMode.min: _aggr($_ \! ^!),
            (s
                -\ (@.version)
                -> (@() [ i++, $_.ticks, $_.version ])));
    
        l[s.Key] = data;
        Console.WriteLine('{0}: {1}', s.Key, data #!);

        data @() chart.series(s.Key, $_, SeriesChartType.StackedBar);
    };
}

l |> serialize @File.WriteAllText('c:\\temp\\dat.alx');

winForms.split([
    [ { control: winForms.propertyGrid(chart), absolute: 250 }, { control: chart } ]
])
@winForms.dialog({ width: 900, height: 400 });

