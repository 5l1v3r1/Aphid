##'Components.Aphid.Library.StandardLibrary';
#'String';
#'List';
#'Conversion';

using System;
print = Console.WriteLine;

is = @(name, target) target.GetType().GetInterface(name) != null;
has = @(name, target)
    target.GetType().GetMethod(name) != null ||
    target.GetType().GetProperty(name) != null;
_dump = macro(@(m) { @() $_.GetType().m()->print });
dumpMembers = _dump(GetMembers);
dumpProps = _dump(GetProperties);
dumpMethods = _dump(GetMethods);

using Components.Aphid.Parser;

parse = @(code) AphidParser.Parse(code, false);
parseExp = @(exp) parse(exp)[0];

parseFunc = @(code) {
    f = @{ };
    f.Body.Clear();
    (code |> parse)->f.Body.Add;
    
    ret f;
};

evalBlock = @(code) parseFunc(code)();
evalExp = @(code) parseFunc('ret ' + code)();

getEnums = @(name) 0 |> getIdArg |> typeof |> Enum.GetValues;
getFullNames = @(name) this.{'$imports'}->@+('.' + name);

_callExp = macro(@(i){ this.{'$frames'}[i].Expression });
getCall = @() _callExp(1);
getArgs = @() _callExp(1).Args;
getArg = @(i) _callExp(1).Args[i];
getIdArg = @(i) _callExp(1).Args[i].Identifier;

typeof = @(name){
    n = name == null ? getIdArg(0) : name;
    t = (n |> getFullNames)->Type.GetType-?@!= null;
    ret t.Count == 1 ? t[0] : null;
};