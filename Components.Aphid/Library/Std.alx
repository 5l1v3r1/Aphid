using System;
##'Components.Aphid.Library.StandardLibrary';
#'String';
#'List';
#'Conversion';

byte = Convert.ToByte;
uint = Convert.ToUInt32;
ulong = Convert.ToUInt64;
sbyte = Convert.ToSByte;
int = Convert.ToInt32;
long = Convert.ToInt64;
float = Convert.ToSingle;
double = Convert.ToDouble;
decimal = Convert.ToDecimal;

format = String.Format;
//_t = @() Cli.WriteLine('~Magenta~Printing {0}~R~', [ $_ ]);
_t = @{};

using System.Linq;
skip = @() Enumerable.Skip($_, 1) |> Enumerable.ToArray;

using Components.External.ConsolePlus;
print = @(fmt, arg0) {
    if ($args.Count >= 1 && fmt == null) {
        1 + 1;
        _null Cli.WriteLine('null', []);
    } else if ($args.Count > 1 && isCollection(fmt)) {
        _t('formatted collection');
        args = $args |> skip;
        for (x in fmt) {
            Cli.WriteLine(x.ToString(), args);
        }
    } else {
        switch ($args.Count) {
            0: {
                _t('blank line');
                Cli.WriteLine();
            }
            1: {
                if (isObject(fmt)) {
                    _t('serialized object');
                    Cli.WriteLine(fmt |> serialize |> Cli.Escape, []);
                } else if (isCollection(fmt)) {                    
                    _t('collection');
                    fmt->@() Cli.WriteLine($_.ToString(), []);
                } else {
                    _t('scalar');
                    Cli.WriteLine(fmt.ToString(), []);
                }
            }
            2: {
                if (arg0 |> isCollection) {
                    _t('formatted collection');
                    Cli.WriteLine(
                        fmt.ToString(),
                        arg0->@()$_.ToString());
                } else {
                    _t('single format arg');
                    
                    Cli.WriteLine(fmt.ToString(), [ arg0 ]);
                }
            }
            default: {
                _t('variadic formatted');
                args = $args |> skip;
                Cli.WriteLine(fmt.ToString(), args);
            }
        }
    }
};


cls = Console.Clear;
head = @(msg){ Cli.WriteHeader($_, '~|Blue~~White~') };
header = head;
dump = serialize @> Console.WriteLine;
exit = @() ($args.Count != 0 ? $_ : 0) |> Environment.Exit;

fatal = @{
    f = $args[0];
    a = $args |> skip;
    print('Fatal error: ' + f, a);
    Environment.Exit(0);
};

is = @(name, target) target.GetType().GetInterface(name) != null;

has = @(name, target)
    target.GetType().GetMethod(name) != null ||
    target.GetType().GetProperty(name) != null;


_get = macro(@(m) { $_.GetType().m() });

_dump = macro(@(m) {
    id(get, m) = @() _get(id(Get, m));
    id(dump, m) = @() ($_ |> id(get, m))->print
});

_dump(Members);
_dump(Properties);
_dump(Methods);

_alias = macro(@(n, n2) {
    id(get, n) = id(get, n2);
    id(dump, n) = id(dump, n2);
});

_alias(Props, Properties);
_alias(Funcs, Methods);

getEntryDir = @() Assembly.GetEntryAssembly().Location |> Path.GetDirectoryName;
getEntryPath = @() $args |> Path.Combine @Path.Combine(getEntryDir());

getEnums = @(name) 0 |> getIdArg |> typeof |> Enum.GetValues;

getFullNames = @(name) this.{'$imports'}->@+('.' + name);

typeof = @(name){
    n = name == null ? getIdArg(0) : name;
    t = (n |> getFullNames)->Type.GetType-?@!= null;
    ret t.Count == 1 ? t[0] : null;
};

using System.Linq;
isObject = keys @> Enumerable.Any;

isCollection = @(x)
    x != null &&
    !isObject(x) &&
    x.GetType() != typeof(String) &&
    x.GetType().GetInterface('IEnumerable') != null;

mix = @(src, dst) {
	for (m in keys(src)) {
		dst.{m} = src.{m};
		mix(src.{m}, dst.{m});
	}
};

getMember = @(obj, path) {	
	val = obj;
	parts = path.split('.');

	for (p in parts) {		
		val = val.{p};
	}

	ret val;
};