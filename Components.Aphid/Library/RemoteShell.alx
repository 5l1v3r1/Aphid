#'Std';
#'Query';
#'Shell';
#'Remoting';
using Components;
using System.Diagnostics;
using System.Threading;

cmd = getCommand();
args = getCommandLineArgs() |> Enumerable.ToList;
getLastArg = @() args |> Enumerable.Last;
parseIntArg = @() getLastArg() |> Int32.Parse;
isClient = args.Contains('-connect');
isHost = args.Contains('-listen');
isWorker = args.Contains('-pid');

_logDate = macro(@{ DateTime.Now.ToString("MM-dd-yy.HH:mm:ss") });
_logArgs = macro(@{ $args @aq.skip(1) @format($args[0]) });
log = @() print('[~Cyan~{0}~R~] {1}' :: [ _logDate(), _logArgs() ]);

head('AphidShell remoting{0}' :: [
    isClient ? ' client' :
    isWorker ? ' host worker process' :
    isHost ? ' host' :
    '' 
]);

hostRemote = @{
    log('Starting host');

    while (true) {
        var p = startChild();
        p.WaitForExit();
    }
};

startChild = @{
    childArgs = "{0} -listen -pid {1}" :: [
        cmd |> ArgLexer.GetTokenInfo |> Enumerable.First @.EndOffset |> cmd.Substring @() $_.Trim(),
        Process.GetCurrentProcess().Id
    ];

    log('Starting remote worker process with args ~Cyan~{0}~R~', childArgs);
    var p = Process.Start(getExe(), childArgs);

    ret p;
};

watchParent = @{
    var t = new Thread(@{
        pId = parseIntArg();
        log('Waiting for parent process ~Cyan~{0}~R~ to exit', pId);
        p = Process.GetProcessById(pId);

        if (p != null) {
            p.WaitForExit();
            exit();
        }
    });

    t.Start();
};

listen = @{
    log('Listening on ~Cyan~{0}~R~', remote.port);
    remote.listen();
    Thread.Sleep(-1);
};

connectShell = @(host) {
    log('Connecting to remote ~Cyan~{0}~R~', host);
    var remoteShell = remote.connectProxy(host);
    remoteShell.Eval('#"Shell";');
    remoteShell.BasePath = 'shell';
    remoteShell.listen();

    ret remoteShell;
};

runInteractive = @(host) {
    var remoteShell = connectShell(host);
    var buffer;

    while (true) {
        remoteShell.writePrompt();

        do {
            buffer = remoteShell.readOut();

            if (buffer != null) {
                buffer |> Cli.Write;
            }
        } while (buffer == null || !buffer.Trim().EndsWith('> ~R~'));

        Console.ReadLine() |> remoteShell.writeInLine;
        
        if (!remoteShell.execNext()) {
            remoteShell.BasePath = 'Environment';
            remoteShell.Exit(0);
            break;
        }
    }
};

if (isHost) {
    if (!isWorker) {
        hostRemote();
    } else {
        watchParent();
        listen();
    }    
} else if (isClient) {
    getLastArg() |> runInteractive;
} else if (args.Contains('-test')) {
    startChild();
    runInteractive('localhost');    
} else {
    print('aphid RemoteShell.alx [-listen] [-connect {host}]');
}