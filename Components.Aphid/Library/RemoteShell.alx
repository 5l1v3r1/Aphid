#'Std';
#'Query';
#'Shell';
#'Remoting';
using Components;
using System.Diagnostics;
using System.Threading;
using System.Text;

var cmd = getCommand();
var argList = getCommandLineArgs() |> Enumerable.ToList;
var getLastArg = @() argList |> Enumerable.Last;
var parseIntArg = @() getLastArg() |> Int32.Parse;
var flag = { connect: '-connect', listen: '-listen', pid: '-pid' };
var isClient = argList.Contains(flag.connect);
var isHost = argList.Contains(flag.listen);
var isWorker = argList.Contains(flag.pid);

_logDate = macro(@{ DateTime.Now.ToString("MM-dd-yy.HH:mm:ss") });
_logArgs = macro(@{ $args @aq.skip(1) @format($args[0]) });
var log = @() print('[~Cyan~{0}~R~] {1}' :: [ _logDate(), _logArgs() ]);

head('AphidShell remoting{0}' :: [
    isClient ? ' client' :
    isWorker ? ' host worker process' :
    isHost ? ' host' :
    '' 
]);

var hostRemote = @{
    log('Starting host');

    while (true) {
        var p = startChild();
        p.WaitForExit();
    }
};

var startChild = @{
    var childArgs = "{0} -listen -pid {1}" :: [
        cmd |> ArgLexer.GetTokenInfo |> Enumerable.First @.EndOffset |> cmd.Substring @() $_.Trim(),
        Process.GetCurrentProcess().Id
    ];

    log('Starting remote worker process with args ~Cyan~{0}~R~', childArgs);
    var p = Process.Start(getExe(), childArgs);

    ret p;
};

var watchParent = @{
    var t = new Thread(@{
        var pId = parseIntArg();
        log('Waiting for parent process ~Cyan~{0}~R~ to exit', pId);
        var p = Process.GetProcessById(pId);

        if (p != null) {
            p.WaitForExit();
            exit();
        }
    });

    t.Start();
};

var listen = @{
    log('Listening on ~Cyan~{0}~R~', remote.port);
    remote.listen();
    log('Sleeping');
    Thread.Sleep(-1);
};

var connectShell = @(host) {
    log('Connecting to remote ~Cyan~{0}~R~', host);
    var remoteShell = remote.connectProxy(host);
    
    log('Connected, initializing shell');
    remoteShell.Eval('#"Shell";');
    remoteShell.BasePath = 'shell';

    log('Shell initialized, listening');
    remoteShell.listen();

    ret remoteShell;
};

var runInteractive = @(host)
    run(host, @(remoteShell) Console.ReadLine());

var run = @(host, nextLine) {
    var remoteShell = connectShell(host);
    var buffer;

    while (true) {
        remoteShell.writePrompt();

        do {
            buffer = remoteShell.readOut();

            if (buffer != null) {
                buffer |> Cli.Write;
            }
        } while (buffer == null || !buffer.Trim().EndsWith('> ~R~'));
        
        var line = nextLine(remoteShell);

        if (line != null) {
            line |> remoteShell.writeInLine;
        }

        if (!remoteShell.execNext()) {
            remoteShell.BasePath = 'Environment';
            remoteShell.Exit(0);
            break;
        }
    }
};


var readToPrompt = @(proxy) {
    var sb = new StringBuilder();
    var buffer;

    do {
        if (buffer != (buffer = proxy.readOut())) {
            buffer |> sb.Append;
        }
    } while (buffer == null || !buffer.Trim().EndsWith('> ~R~'));

    ret sb.ToString();
};

var execRemoteScript = @(host, scriptFile) {
    using System.Collections.Generic;
    printInfo('Executing script file ~Cyan~{0}~R~', scriptFile);
    
    var lines =
        scriptFile
        |> File.ReadAllLines
        -> (@()($_.Contains('//') ? $_.Remove($_.IndexOf('//')) : $_).Trim())
        -? @!= '';

    var queue = new Queue[Object](lines);
    queue.Enqueue('using System');
    queue.Enqueue('Environment.Exit 0');

    try {
        run(
            host,
            @{
                var cmd = queue.Count > 0 ? queue.Dequeue() : null;
                Console.WriteLine(cmd);

                ret cmd;
            });
    } catch {

    }
};

if (isHost) {
    if (!isWorker) {
        hostRemote();
    } else {
        watchParent();
        listen();
    }    
} else if (isClient) {
    var i = argList.IndexOf(flag.connect);

    if (i == argList.Count - 2) {
        getLastArg() |> runInteractive;
    } else {
        var script = argList[argList.Count - 2];
        var result = argList |> Enumerable.Last @execRemoteScript(script);

        if (result.success defined && result.success && result.out defined) {
            result.out @print('Result:\r\n{0}');
        }
    }
} else if (argList.Contains('-test')) {
    startChild();
    runInteractive('localhost');    
} else {
    print('aphid RemoteShell.alx [-listen] [-connect {host} {file}]');
}