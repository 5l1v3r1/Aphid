remote = null;

class RemoteProxy {
    AphidFunction Connect,
    Guid RemoteId,
    String BasePath
};

extend RemoteProxy {
    Eval: @(s, code) code |> remote._remoteTable.{s.RemoteId}.eval,

    dynamic handle: @(s, name) {
        using System.Text;
        var sb = new StringBuilder();
        sb.Append('ret ');
        sb.Append(!String.IsNullOrEmpty(s.BasePath) ? s.BasePath + '.' + name : name);
        sb.Append('(\r\n    ');

        var firstArg = true;

        $args @aq.skip(1) -> serialize ->@(s) {
            if (firstArg) {
                firstArg = false;
            } else {
                sb.Append(', ');
            }

            s |> sb.Append;
        };

        sb.AppendLine(');');

        var resp = sb.ToString() |> remote._remoteTable.{s.RemoteId}.eval;
        
        ret resp != null && resp.result defined ?
            resp.result :
            { success: false, result: 'Error', obj: resp };
    }
}

@{
    _t;
    #'Query';
    _t = traceRemoting defined ?
        @(f){
            if ($args.Count == 0) print('');
            else if ($args.Count == 1) print($args[0]);
            else  print($args[0], $args @aq.skip(1));
        } :
        @{ };
    using System;
    using System.IO;
    using System.Net;
    using System.Net.Sockets;
    using System.Text;
    #'Threading';

    extend TcpClient {
        isConnected: @(c) c.Client.Poll(0, SelectMode.SelectRead) && c.Client.Available != 0,
    }

    utf8 = new UTF8Encoding();

    createClient = @(tcp) ({
        socket: tcp,
        stream: tcp.GetStream(),
        
        
        read: @{
            reader = new BinaryReader(tcp.GetStream());
            len = reader.ReadUInt32();
            _t('Receiving {0:n0} bytes', len);
            buf = len |> Convert.ToInt32 |> reader.ReadBytes;
            _t('{0:n0} bytes read', buf.Length);

            ret new AphidObject(buf |> utf8.GetString);
        },

        write: @(b) {
            buf;
            buf = b |> utf8.GetBytes;
            writer = new BinaryWriter(tcp.GetStream());
            buf.Length |> Convert.ToUInt32 |> writer.Write;
            buf |> writer.Write;
        },
    });

    _isAlive = macro(@(client) { client.Connected });

    remote = {
        port: 0x5230,

        listen: @{
            ctx;
            _t('Creating listener on port {0}', remote.port);
            ctx = { listener: new TcpListener(remote.port), clients: [] };
            _t('Starting listener');
            l = ctx.listener;
            ctx.listener.Start();

            ctx.listenThread = thread(@{
                aphid;
                aphid = this.{'$aphid'};
                while (true) {
                    _t('Waiting for client');

                    try {
                        tcp;
                        c;

                        tcp = ctx.listener.AcceptTcpClient();
                        _t('Client connected');
                        c = createClient(tcp);

                        c.thread = thread(@{
                            buffer;
                            resp;
                            _t('Creating client thread');

                            // while (n.socket.isConnected()) {
                            try {
                                while (c.socket.Connected) {
                                    try buffer = c.read();
                                    catch (e) {
                                        _t('Error reading buffer: {0}', e.message);
                                        continue;
                                    }

                                    _t('Buffer: ~Cyan~{0}~R~', buffer);

                                    try resp = { result: buffer |> aphid.InterpretStream } |> serialize;
                                    catch (e) {
                                        _t('Error serializating response: {0}', e.message);
                                        this |> serialize |> c.write;
                                    }

                                    resp |> c.write;
                                }
                            } catch (e) {
                                _t('Client connection error: {0}', e.message);
                            }

                            _t('Client disconnected');
                        });

                        ctx.clients.add(c);
                    } catch (e) {
                        _t('Error accepting client: {0}', e.message);
                    }
                }            
            });

            ret ctx;
        },

        connect: @(server){
            tcp;
            client;

            if (!(server defined) || server == null) {
                fata('Server must be specified');
            }

            _t('Connecting to remote session {0}', server);
            tcp = new TcpClient();
            tcp.Connect(server, 0x5230);        
            client = createClient(tcp);

            client.eval = @(exp) {
                _t('Writing command: ~Cyan~{0}~R~', exp.Replace('~', '~~'));
                //this |> keys |> dump;
                write(exp);
                _t('Reading command');
                buf = read();
                _t('Server response: {0}', buf.Replace('~', '~~'));
                ret buf |> deserialize;
            };

            _t('Connected to remote session');

            ret client;
        },
        _remoteTable: {},
        
        connectProxy: @(server) {
            proxy;
            proxy = new RemoteProxy();
            proxy.RemoteId = Guid.NewGuid();
            remote._remoteTable.{proxy.RemoteId} = remote.connect(server);

            ret proxy;
        }
    };
}();