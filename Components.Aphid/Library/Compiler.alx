var exports;
var resources;
var csharp;

@{
    #'CodeDom';
    #'Std';
    #'Meta';

    using System.Security.Cryptography;

    var md5Provider = new MD5CryptoServiceProvider();
    
    var md5 = {
        hash: md5Provider.ComputeHash,
        hex: @(buffer) buffer |> hash -> @format('{0:x2}') +> @(x, y) x + y
    };

    exports = {
        compileFile: @(namespace, srcFile){
            printInfo('Parsing ~Cyan~{0}~R~', srcFile);
            ret srcFile |> File.ReadAllText @compile(namespace);
        },

        compile: @(namespace, srcCode){
            var srcAst;
    
            try {
                srcAst = srcCode |> parse;
            } catch (e) {
                AphidCli.DumpException(e.exception.InnerException, srcCode);
                ret null;
            }

            var bytecode = AphidByteCode.Encode(srcAst);
            var resource = 'ByteCode_{0}' :: (bytecode |> md5.hex);

            var cs =
                srcAst
                |> exports.find
                -> (@() exports.generate(namespace, resource, $_))
                @join('\r\n');

            cs =
                '\r\n' +
                cs + '\r\n' +
                resources.embed(namespace, resource, bytecode);

            [ 'Components.Aphid.Interpreter', 'Components.Aphid.Parser' ]->@()
                cs = 'using global::' + $_ + ';\r\n' + cs.Replace($_ + '.', '');

            ret cs.Trim() != '' ? cs : null;
        },

        resolve: @(type) this.{'$aphid'}.InteropTypeResolver.ResolveType(
            this.{'$imports'}.ToArray(),
            [ type ],
            true,
            true),

        find: @(srcAst) {
            using System.Collections.Generic;
            var exports = new List[AphidObject]();

            srcAst @ast.walk(@(node, context) {
                if (!context.isRoot && !context.isBlock && node.isId() && node.firstAttr(export)) {
                    var exportExp = context.stack
                        ->@.node
                        @aq.first(@(x)
                            x.GetType() == BinaryOperatorExpression &&
                            x.isOp(AphidTokenType.AssignmentOperator));

                    var retType =
                        ($(node.attrs() #!) 1: 'void', node.attr(1).Identifier)
                        |> resolve;

                    var memberPath = exportExp.lhs().GetChildren()->@.Identifier;
                    var className = memberPath[0];
                    var propertyName = memberPath[1];
                
                    var params = exportExp.rhs().Args
                        ->@()({
                            type: ($_.noAttrs() ? 'AphidObject' : $_.attr(0).Identifier) |> resolve,
                            name: $_.Identifier
                        });

                    {
                        retType,
                        className,
                        propertyName,
                        params,
                        func: exportExp.rhs()
                    } |> exports.Add;
                }
            });

            ret exports;
        },

        generate: @(namespace, resource, export) {
        
            var typeName = export.className;
            var delName = export.propertyName + 'Delegate';
            var fieldName = '_' + export.propertyName;
            var f = code.field(code.typeExp(typeName), fieldName);
            
            var d = code
                .namespace(namespace)
                .type(typeName)
                .partial()
                .field(delName, fieldName)
                .static()
                .next()
                .withPublic()
                .property(delName, export.propertyName)
                .static()
                .getStmt(
                    f.ifNull([
                        code
                            .ctor(AphidInterpreter, [])
                            .call(
                                'Interpret',
                                [
                                    code.typeExp(AphidByteCode).call(
                                        'Decode',
                                        [ code.var('Resources').field(resource) ])
                                ])
                            .stmt(),
                    ]))
                .wrapField(f)
                .next()
                .delegate(export.retType, delName);

            export.params->@() d.param($_.type, $_.name);

            ret d.next().namespace().code();
        }
    };

    resources = {
        embed: @(namespace, resource, buffer) {
            var typeName = 'Resources';
            var type = byte.MakeArrayType();
            var fieldName = '_' + resource;

            ret code
                .namespace(namespace)
                .type(typeName)
                .partial()
                .field(type, fieldName, code.arrayCreate(type, buffer->code.primitive))
                .static()
                .next()
                .withPublic()
                .property(type, resource)
                .static()
                .getField(code.typeExp(typeName).field(fieldName))
                .next()
                .namespace()
                .code();
        },
    };

    csharp = {
       fromAst: @(block) {
           using System.Text;

            var sb = new StringBuilder();

            var whitespace = {
                indentCount = 0,
                getTab = @() indentCount * '    ',
                indent = @{ indentCount++ },
                unindent = @{ indentCount-- },
            };

            var emit = @(text) sb.Append(whitespace.getTab() + text);
            var emitLine = @(text) sb.AppendLine(whitespace.getTab() + text);

            var compile = @(block, delim, genericParam) {
                emitLine('new List<{0}>' :: genericParam defined ? genericParam : 'AphidExpression');
                emitLine('{');
                whitespace.indent();
                block->@() compileNode($_, ',');
                whitespace.unindent();
                emitLine('}}{0}'  :: delim defined ? delim : '');
            };

            var compileNode = @(node, compileDelim) {
                var t = node.GetType();
                emitLine('new {0}(' :: t.Name);
                whitespace.indent();
                
                var props = t.GetProperties();
                var ctorParams = props-?@() $_.DeclaringType == t && $_.PropertyType != AphidExpressionType;
                var i = 0;
                ctorParams->@()$_.GetValue(node) @compileArg(i++, i == (ctorParams #!));
                
                whitespace.unindent();
                emitLine('){0}' :: compileDelim defined ? compileDelim : '');
            };

            var compileArg = @(index, isLast, arg) {
                var delim = isLast ? '' : ',';

                if (arg == null) {
                    emitLine('null{0}' :: delim);
                    ret null;
                }

                var t = arg.GetType();

                

                if (t == AphidTokenType) {
                    emitLine('AphidTokenType.{0}{1}' :: [ arg.ToString(), delim ]);
                } else if (t.BaseType == AphidExpression) {
                    compileNode(arg, delim);
                // Todo: investigate optimizing via hardcoding cases for generic 
                // types e.g. List[IdentifierExpression]
                // } else if (IEnumerable[IdentifierExpression].IsAssignableFrom(t)) {
                //     compile(arg, delim, 'IdentifierExpression');
                } else if (IEnumerable[AphidExpression].IsAssignableFrom(t)) {
                    compile(arg, delim, t.GetGenericArguments()[0].Name);
                } else if (t == string) {
                    emitLine('"{0}"{1}' :: [ arg.Replace('"', '\\"'), delim ]);
                } else if (t == decimal) {
                    emitLine('{0}{1}' :: [ arg, delim ]);
                } else if (t == bool) {
                    emitLine('{0}{1}' :: [ arg.ToString().ToLower(), delim ]);
                } else {
                    throw 'Not implemented: {0}' :: t;
                }
            };

            emitLine('namespace Test');
            emitLine('{');
            whitespace.indent();
            emitLine('using Components.Aphid.Lexer;');
            emitLine('using Components.Aphid.Parser;');
            emitLine('using System.Collections.Generic;');
            emitLine('');
            emitLine('public static class TestClass');
            emitLine('{');
            whitespace.indent();
            emitLine('public static List<AphidExpression> GetAst()');
            emitLine('{');
            whitespace.indent();
            emit('return ');
            test |> compile;
            sb.AppendLine(';');
            whitespace.unindent();
            emitLine('}');
            whitespace.unindent();
            emitLine('}');
            whitespace.unindent();
            emitLine('}');

            ret sb;
       } 
    };
}();