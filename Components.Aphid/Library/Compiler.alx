var exports;
var resources;

@{
    #'CodeDom';
    #'Std';
    #'Meta';

    using System.Security.Cryptography;

    var md5Provider = new MD5CryptoServiceProvider();
    
    var md5 = {
        hash: md5Provider.ComputeHash,
        hex: @(buffer) buffer |> hash -> @format('{0:x2}') +> @(x, y) x + y
    };

    exports = {
        compileFile: @(namespace, srcFile){
            printInfo('Parsing ~Cyan~{0}~R~', srcFile);
            ret srcFile |> File.ReadAllText @compile(namespace);
        },

        compile: @(namespace, srcCode){
            var srcAst;
    
            try {
                srcAst = srcCode |> parse;
            } catch (e) {
                AphidCli.DumpException(e.exception.InnerException, srcCode);
                ret null;
            }

            var bytecode = AphidByteCode.Encode(srcAst);
            var resource = 'ByteCode_{0}' :: (bytecode |> md5.hex);

            var cs =
                srcAst
                |> exports.find
                -> (@() exports.generate(namespace, resource, $_))
                @join('\r\n');

            cs =
                '\r\n' +
                cs + '\r\n' +
                resources.embed(namespace, resource, bytecode);

            [ 'Components.Aphid.Interpreter', 'Components.Aphid.Parser' ]->@()
                cs = 'using global::' + $_ + ';\r\n' + cs.Replace($_ + '.', '');

            ret cs.Trim() != '' ? cs : null;
        },

        resolve: @(type) this.{'$aphid'}.InteropTypeResolver.ResolveType(
            this.{'$imports'}.ToArray(),
            [ type ],
            true,
            true),

        find: @(srcAst) {
            using System.Collections.Generic;
            var exports = new List[AphidObject]();

            srcAst @ast.walk(@(node, context) {
                if (!context.isRoot && !context.isBlock && node.isId() && node.firstAttr(export)) {
                    var exportExp = context.stack
                        ->@.node
                        @aq.first(@(x)
                            x.GetType() == BinaryOperatorExpression &&
                            x.isOp(AphidTokenType.AssignmentOperator));

                    var retType =
                        ($(node.attrs() #!) 1: 'void', node.attr(1).Identifier)
                        |> resolve;

                    var memberPath = exportExp.lhs().GetChildren()->@.Identifier;
                    var className = memberPath[0];
                    var propertyName = memberPath[1];
                
                    var params = exportExp.rhs().Args
                        ->@()({
                            type: ($_.noAttrs() ? 'AphidObject' : $_.attr(0).Identifier) |> resolve,
                            name: $_.Identifier
                        });

                    {
                        retType,
                        className,
                        propertyName,
                        params,
                        func: exportExp.rhs()
                    } |> exports.Add;
                }
            });

            ret exports;
        },

        generate: @(namespace, resource, export) {
        
            var typeName = export.className;
            var delName = export.propertyName + 'Delegate';
            var fieldName = '_' + export.propertyName;
            var propName = export.propertyName;
            var f = code.field(code.typeExp(typeName), fieldName);
            var aphid = AphidInterpreter;
            var aphidName = 'interpreter';
            
            var d = code
                .namespace(namespace)
                .type(typeName)
                .partial()
                .field(delName, fieldName)
                    .static()
                    .next()
                .withPublic()
                .property(delName, propName)
                    .static()
                    .getStmt(code.condition(
                        code.binaryOp(
                            f,
                            CodeBinaryOperatorType.IdentityEquality,
                            code.primitive(null)),
                            [
                                code.exp(
                                    code.methodInvoke(
                                        code.objectCreate(aphid, []),
                                        'Interpret',
                                        [
                                            code.methodInvoke(
                                                code.typeExp(AphidByteCode),
                                                'Decode',
                                                [ code.field(code.var('Resources'), resource) ])
                                        ])),
                            ]))
                    .getStmt(code.methodReturn(f))
                    .setStmt(code.assign(f, code.var('value')))
                    .next()
                .delegate(export.retType, delName);

            export.params->@() d.param($_.type, $_.name);

            ret d.next().namespace().code();
        }
    };

    resources = {
        embed: @(namespace, resource, buffer) {
            var typeName = 'Resources';
            var type = byte.MakeArrayType();
            var fieldName = '_' + resource;

            var cs = code
                .namespace(namespace)
                .type(typeName)
                .partial()
                .field(
                    type,
                    fieldName,
                    code.arrayCreate(type, buffer->code.primitive))
                .static()
                .next()
                .withPublic()
                .property(type, resource)
                .static()
                .getStmt(
                    code.methodReturn(
                        code.field(
                            code.typeExp(typeName),
                            fieldName)))
                .next()
                .namespace()
                .code();

            ret cs;
        },
    };
}();