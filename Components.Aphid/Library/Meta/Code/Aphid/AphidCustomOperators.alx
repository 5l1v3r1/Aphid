#'Std';
using Components.Aphid.Lexer;
using System;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;

//cls();

var customOps = AphidTokenType
    |> getEnums
    -? @(x) x.ToString().Contains('CustomOperator');

var getCases = @(indent) customOps
    ->(@String.Format('{0}case AphidTokenType.{1}:\r\n', indent))
    +>(@(x, y) x + y);

var getOr = @(indent)
    indent +
    (customOps ->(@+'\r\n') +>(@(x, y) x + indent + '| ' + y));

var getTup = @(indent)
    indent +
    (customOps +>(@(x, y) x + ',\r\n' + indent + y)) +
    '\r\n';

var dir = Environment.GetCommandLineArgs()[1]
    |> Path.GetFullPath
    |> Path.GetDirectoryName;

var updateCustomOperators = @(codeFile, regionBegin, regionEnd, getText) {
    var code = codeFile |> File.ReadAllText;
    var matches = @Regex.Matches(code);
    var ends = regionEnd |> matches;
    var ranges = [];

    ('(( |\t)+)' + regionBegin) |> matches
     for {
        var o = {
            indent: $_.Groups[1].Value,
            start: $_.Index,
            end: code.IndexOf(regionEnd, $_.Index)
        };
        ranges.add(o);
    };

    ranges.Reverse();

    ranges->@() code = code
        .Remove($_.start, $_.end - $_.start)
        .Insert(
            $_.start,
            $_.indent + regionBegin + '\r\n' +
            ($_.indent |> getText) + 
            $_.indent);

    code @File.WriteAllText(codeFile);
};

updateCustomOperators(
    Path.Combine(dir, 'Interpreter', 'AphidInterpreter.cs'),
    '#region Custom Operator Cases',
    '#endregion',
    getCases);

updateCustomOperators(
    Path.Combine(dir, 'Aphid.alx'),
    '// CustomOperatorOr Begin',
    '// CustomOperatorOr End',
    getOr);

updateCustomOperators(
    Path.Combine(dir, 'Aphid.alx'),
    '// CustomOperatorTup Begin',
    '// CustomOperatorTup End',
    getTup);

    