// Todo: 
// * Use service/locator to enforce uniform mutator application
// * Add operators/syntax to work with raw token streams e.g.
// * tokens = #This is a token stream !@#$%^&*()_;
// * tokens = #{
//      This is a multi-line token stream.
//   };
// * Add id syntax for macro params.
// * Add lightweight macro syntax.
// * Add lightweight extend syntax.
//   extend ManagementObjectCollection toAphid: @(c) { ...  };
// * add support for preprocessor backreferences e.g.
//   _tl = id macro(@(type <- last ExtendExpression.ExtendType.Identifier) {
//      extend type { toList: @(c) 0..c.Count->@()c[$_] }
//   });
//   extend ManagementObjectCollection toAphid: @(c){ /*...*/}
//   _tl;

var wmi;

@{
    #'Std';
    load System.Management;
    using Components.Aphid.TypeSystem;
    using System.Management;
    
    _tl = macro(@{ @(c) 0..c.Count->@()c[$_] });
    extend ManagementObjectCollection { toList: _tl() }
    extend PropertyDataCollection { toList: _tl() }
    
    wmi = {
        preserveFixedNames: false,
        query: @(wmiQuery) {
            if (wmiQuery != null &&
                wmiQuery.GetType() == AphidFunction) {
                var results = wmiQuery |> parseInlineQueries -> wmi.query;
                ret results.Count == 1 ? results[0] : results;
            }

            var searcher = new ManagementObjectSearcher(wmiQuery);
            var results = searcher.Get().toList();

            ret results->@(mo) {
                var ao = { wmiObj: mo };

                var allProps = [$_.SystemProperties, $_.Properties]
                    -<(@()$_.toList());

                allProps
                    ->@(p) (preserveFixedNames ?
                        @() [ p.Name, wmi.fixName(p.Name) ] :
                        @() [ wmi.fixName(p.Name) ])()
                        !?->@(n) ao.{n} = p.Value;

                ret ao;
            };
        },

        isSystemName: @(n)
            n.StartsWith('__') &&
            (n.Substring(2) =? @(x) Char.IsUpper(x) || x == '_'),

        fixSystemName: @(name) name
            .Substring(2)
            .Split('_'.ToCharArray())
            ->(@() $_.Remove(1) + $_.Substring(1).ToLower())
            |> concat,

        fixName: @(name) wmi.isSystemName(name) ?
            wmi.fixSystemName(name) :
            name,

        parseInlineQueries: @(block) block->@(x) x
            .ToString()
            .Trim()
            .TrimStart('@{'.ToCharArray())
            .TrimEnd('};'.ToCharArray()),

        test: @{
            #'Std';
            var wmiResults = wmi.query("SELECT ProcessId, ExecutablePath, CommandLine FROM Win32_Process");
            wmiResults
            -?(@() $_.CommandLine!= null)
            ->(@.CommandLine)
            |>print;
            //wmiResults |> dumpe;
            exit();
        },
    };
}();

//wmi.test();

