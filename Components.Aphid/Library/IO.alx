##'Components.Aphid.Library.IOLibrary';
using System.IO;

var getFsos = @(f, dir, opt) {
    var filter = '*';
    var recurse = false;

    if (opt defined) {
        if (opt.filter defined) filter = opt.filter;
        if (opt.recurse defined) recurse = opt.recurse;
    }

    ret f(dir, filter, recurse);
};

io.dir.getFiles = @getFsos(io.dir.getFilesInternal);
io.dir.getDirs = @getFsos(io.dir.getDirsInternal);

@ \ (lhs, rhs) Path.Combine(lhs, rhs);
@ .\ (path) path |> Path.GetFullPath;

_ob = macro(@(o) { Directory.GetFiles(path, pattern defined ? pattern : '*', SearchOption.o) });
@ .* (path, pattern) _ob(TopDirectoryOnly);
@ :* (path, pattern) _ob(AllDirectories);

var dirExists = Directory.Exists;
var fileExists = File.Exists;
var isDir = dirExists;
var isFile = fileExists;

io.files = Directory.EnumerateFiles;
io.dirs = Directory.EnumerateDirectories;
io.text = File.ReadAllText;
io.lines = File.ReadAllLines;
io.bytes = File.ReadAllBytes;
io.del = File.Delete;
io.rd = Directory.Delete;
io.len = @() (new FileInfo($_)).Length;
