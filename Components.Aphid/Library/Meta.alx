// Todo: generate API documentation from AST e.g.
//
// // Summary: Walks the abstract syntax tree beginning
// // with the root specified via the node parameter and
// // prints a text representation to the console.
// // node: The node to treat as root of the tree.
// // returns: null.
// dumpAst = @(node) { ... }
//
// * Use comments to generate documentation that links
//   identifiers in descriptions.
// * Infer "returns: null" when not specified.
// * Support single-line comments that are contiguous or
//   broken by whitespace. Also support multi-line comments.
// * Output multiple formats e.g. HTML, XML, Markdown,
//   formats used by intellisense/autocomplete, etc.
// * Support output formats definitions via EBNF-style grammar.

using System;
using Components.Aphid.Lexer;
using Components.Aphid.Interpreter;
using Components.Aphid.Parser;

@`(depth, num) this.{'$frames'}[depth].Expression.Args[num].Identifier;

@\ (lhs, rhs) {
    s = this.{'$frames'}[0].Scope;
    args = s.{'$args'};
    i = s.argIndex defined ? s.argIndex++ : s.argIndex = 1;
    ret args.Count < i ? lhs : lhs && rhs;
    
};

mutate;
mutateFunc;
transformBlock;

@{
    using Components.Aphid.Parser;
    mutate = @(mutateNode, rootNode) (new ScriptMutator(mutateNode)).MutateRecursively(rootNode);
    
    mutateFunc = @(mutateBody, func) {
        using Components.Aphid.Interpreter;
        using System.Reflection;
        r;
        r = func.Body @mutate(mutateBody);
        func.Body.Clear();
        r->func.Body.Add;

        ret func;
    };

    transformBlock = @(f) this.{'$aphid'}.OnInterpretBlock = f;
}();

frames = @() this.{'$frames'};
frame = @(i) this.{'$frames'}[i];

_op = macro(@(op){ @{ op; } });
_ad = macro(@(op){ @{ code.indent = op * code.tab; } });

tokenize = @(text) (new AphidLexer(text)).GetTokens();
getToken = @(text) tokenize(text)[0].TokenType;

parse = @(code) AphidParser.Parse(code);
parseExp = @(exp) parse(exp)[0];

parseFunc = @(code) {
    f = @{ };
    f.Body.Clear();
    (code |> parse)->f.Body.Add;
    
    ret f;
};

evalBlock = @(code) parseFunc(code)();
evalExp = @(code) parseFunc('ret ' + code)();

evalNode = @(node) {
    templateFunc = @{ };
    (ast.isRet($_) ? $_ : ast.makeRet($_)) |> templateFunc.Body.Add;
    r = templateFunc();
    templateFunc.Body.Clear();

    ret r;
};

evalAst = @(ast) {
    templateFunc = @{ };
    ast->templateFunc.Body.Add;
    r = templateFunc();
    templateFunc.Body.Clear();

    ret r;
};

makeFluent = @(obj) {
    n = getIdArg(0);
    (obj |> keys)
    -> (@() obj.{$_})
    -? (@has('Body'))
    -> (@{
        using System.Linq;
        if (($_.Body.Count) == 0 ||
            ($_.Body |> Enumerable.Last |> ast.isRet @== false))
            'ret ' + n  |> parseExp |> $_.Body.Add;
    });

    ret obj;
};

using System.Collections;

if (!this.{'$asm'}.IsTypeDefined('VisitorFrame')) {
    class VisitorFrame { node, context };
}

ast = {
    op: @() $_.Operator,
    hasOp: @(op, node) @has('Operator') && isOp(op),
    isOp: @(op, node) node.Operator == op,
    isRet: @() $_.Type == nodeType.unOp && ast.isOp(token.return, $_),
    lhs: @(node) node.LeftOperand,
    rhs: @(node) node.RightOperand,
    attr: @(node) node.Attributes[0],

    nodeIs: @(type, node) node.Type == type,
    isId: @(node) node @ast.nodeIs(
        AphidExpressionType.IdentifierExpression),
    
    attrs: @(node) {
        if (!(node |> ast.isId))
        {
            print('ast.attrs expects id node');
            
            ret null;
        }

        ret node.Attributes->@.Identifier;
    },

    depth: 0,
    indent: @() ' ' * ast.depth * 2,

    walk: @(visit, node, context) {
        c = null;

        if (context defined) {
            c = context;
        } else {
            c = { stack: new Stack()};
            
            c.push = @(n) {
                if (n defined && n != null) {
                    // print('Pushing {0}', [ n.ToString() ] );
                    f = new VisitorFrame();
                    f.node = n;
                    f.context = f;
                    c.stack.Push(f);
                    // Console.WriteLine('Pushed');
                }
            };

            c.pop = @() c.stack.Pop();            
        }

        context = c;

        c.isRoot = ast.depth == 0;
        c.isBlock = node @is('IEnumerable');
        c.hasChildren = node @has('GetChildren');
        c.isHandled = false;
        c.push(node);        
        visit(node, c);
        c.pop();
        next = @(node) {
            if (node != null) {
                c.push(node);
                ast.walk(visit, node, c);
                c.pop();
            }
        };

        if (c.isHandled) ret null;
        
        if (c.isBlock) {
            ast.depth++;
            c.push(node);
            node->next;
            c.pop();
            ast.depth--;
        } else if (c.hasChildren) {  
            node.GetChildren() |> next;
        }
    },

    walkNodes: @(visit, node) {
        node @ast.walk(@(node, context) {
            if (!context.isRoot && !context.isBlock) {
                visit(node, context);
            }
        });
    },

    where: @(predicate, node) {
        matches = [];
        node @walk(@(innerNode, context) {
            if (predicate(innerNode, context)) {
                print('Match: {0}, {1}', innerNode.Type, innerNode.ToString());
                matches.add(innerNode);
            }
        });

        ret matches;
    },

    whereNode: @(predicate, node)
        node @where(@(innerNode, context)
            innerNode != null &&
            !context.isRoot &&
            !context.isBlock &&
            predicate(innerNode, context)),

    id: @(name, attrs) $args.Count == 2 ?
        (new IdentifierExpression(name, attrs)) :
        (new IdentifierExpression(name, expList('IdentifierExpression'))),

    unOp: @(operator, operand, postfix) new UnaryOperatorExpression(operator, operand, false),
    preUnOp: @(operator, operand) unOp(operator, operand, false),
    binOp: @(lhs, operator, rhs) new BinaryOperatorExpression(lhs, operator, rhs),
    member: @(lhs, rhs) binOp(lhs, getToken('.'), rhs),
    pair: @(lhs, rhs) binOp(lhs, getToken(':'), rhs),
    call: @(target, args) new CallExpression(target, args),
    text: @(text) new TextExpression(text),
    
    str: @(value) new StringExpression(expression
        .ToString()
        .Replace('\\', '\\\\')
        .Replace('"', '\\"')
        @format('"{0}"')),

    makeRet: @(operand) preUnOp(token.return, operand),
    return: makeRet,
    
    expList: @(type) []
        .GetType()
        .GetGenericTypeDefinition()
        .MakeGenericType([
            type 
            @String.Format('Components.Aphid.Parser.{0}')
            |> Type.GetType
        ])
        |> Activator.CreateInstance,

    block: @expList('AphidExpression'),

    first: @(predicate, rootNode) {
        match = null;
        rootNode @ast.walk(@(node, context){
            if (match != null) {
                context.isHandled = true;
                ret null;
            } else if (predicate(node, context)) {
                match = node;
                context.isHandled = true;
                ret null;
            }
        });

        ret match;
    },

    firstNode: @(predicate, rootNode)
        rootNode @ast.first(@(n, c)
            !c.isBlock && !c.isRoot && predicate(n, c))
};

nodeType = { };

@{
    id Identifier;
    unOp UnaryOperator;
    binOp BinaryOperator;
    str String;
    call Call;
}.Body->@{
    nodeType.{$_.Attributes[0].Identifier} = 
        $_.Identifier
        @String.Format('AphidExpressionType.{0}Expression')
        evalExp
};

token = {
    return: AphidTokenType.retKeyword
};

extend AphidFrame {
    exp: @(x) x.Expression,
}

#'Query';

extend AphidExpression {
    is: @(x, type) x.Type == evalExp('AphidExpressionType.' + getIdArg(0) + 'Expression'),
    isScript: @(x) x.is(LoadScript),
    isCall: @(x) x.is(Call),
    isId: @(x) x.is(Identifier),
    isUnOp: @(x) x.is(UnaryOperator),
    isBinOp: @(x) x.is(BinaryOperator),
    isObj: @(x) x.is(Object),
    isExt: @(exp, type) exp.is(Extend) \ exp.extType() == (1`0),
    isText: @(x) x.is(Text),

    init: @(exp) {
        exp.isUsing = exp.isOp(getToken('using'));
    },
    isUsing: null,
    // isUsing: @(exp) exp.isOp(getToken('using')),

    isOp: @(x, op) (x.isUnOp() || x.isBinOp()) && x.op() == op,

    isParent: @(x) x.GetType().GetMethod('GetChildren') != null,
    anyChild: @(x, predicate)
        x.isParent() &&
        (!(predicate defined) || (x.GetChildren() @aq.any(predicate))),
    
    oneAttr: @(x, a) x.attrs().Count == 1 && x.attr(0).id() == getIdArg(0),
    firstAttr: @(x, a) x.attrs().Count >= 1 && x.attr(0).id() == getIdArg(0),
    noAttrs: @(x) x.attrs().Count == 0,
    
    exp: @(x) x.Expression,
    id: @(x) x.Identifier,
    lhs: @(x) x.LeftOperand,
    rhs: @(x) x.RightOperand,
    func: @(x) x.FunctionExpression,
    args: @(x) x.Args,
    op: @(x) x.Operator,
    obj: @(x) x.Object,
    pairs: @(x) x.Pairs,
    extType: @(x) exp.is(Extend) ? x.ExtendType.id() : null,

    attr: @(x, i) x.attrs().Count >= 1 + i ? x.attrs()[i] : null,
    attrs: @(x) x.isId() ? x.Attributes : null,
    attrIds: @(x) x.attrs()->@(y)y.id(),
    body: @(x, i) !x.is(Function) || x.Body.Count <= i ? x : x.Body[i],    
    hasHeader: @(x, h) getArg(0).matchId(x.body(0)),

    matchId: @(x, y)
        x.isId() &&
        y.isId() &&
        x.id() == y.id() &&
        Enumerable.SequenceEqual(x.attrIds(), y.attrIds()),

    member: @(lhs, rhs) ast.member(lhs, rhs).WithPositionFrom(lhs),
    property: @(lhs, name) lhs
        .member(ast.id(name).WithPositionFrom(lhs))
        .WithPositionFrom(lhs),
    call: @(target, args) ast.call(target, args).WithPositionFrom(target),    
}

extend AphidFunction { map: @(f, selector) f.Body->selector }

// extend TextExpression {
//     replace: @(text, search, replacement)
//         text.Text.Replace(search, replacement) |> ast.text @() $_.WithPositionFrom(text),
// }

getLexer = @(stream) {
    l = {
        index: -1,
        token: null,
        count: stream.Count,
        eos: false,
        stream,

        oneOrNone: @(set, def) {
            for (x in set) {
                print('[?] Checking for {0}', x);
                if (x |> match) {
                    ret $_;
                }
            }

            ret def;
        },

        match: @(t) {
            if (token == t) {
                //print('[+] token matched');
                next();
                ret true;
            } else {
                //print('[-] token not matched');
                ret false;
            }
        },
        
        take: @() {
            t = token;
            if (!eos) next();

            ret t;
        },

        next: @{
            if (index < count) index++;

            if (index != count) {
                token = stream[index];
                //print('[+] Next token: {0}', token);
            } else {
                token = null;
                eos = true;
            }

            ret token;
        }
    };

    l.next();

    ret l;
};


dumpAst = @(node) {
    node @ast.walk(@(node, context) {
        if (context.isRoot) {
            print('Root');
        } else if (!context.isBlock) {
            (node |> getProps) -> (@.Name) +> (@+ ', ' + $args[1])
            @print('{0}{1} {{ {2} }}', ast.indent(), node.Type);
            // node |> toJson |> print;
        }
    });
};

dumpAstJson = @(node){
    #'Std';
    #'Serialization';
    node @ast.walk(@(node, context) {
        if (context != null &&
            !context.isBlock &&
            !context.isRoot &&
            node != null) {
            if (node @has('Code')) {
                node.Code = null;
            }

            if (node @has('Index')) {
                node.Index = -1;
            }
        }
    });

    node |> toJson |> print;
    ret null;
};