

//var traceRemoting = true;
//#'DebugDeploy';
#'Std';
#'Cli\\Shell';
#'Remoting\\Remote';
#'System/Machine';
using Components;
using System.Diagnostics;
using System.Threading;
using System.Text;

var cmd = getCommand();
var argList = getCommandLineArgs() |> Enumerable.ToList;
var getLastArg = @() argList |> Enumerable.Last;
var parseIntArg = @() getLastArg() |> Int32.Parse;
var flag = { connect: '-connect', listen: '-listen', pid: '-pid', test: '-test' };
var isClient = argList.Contains(flag.connect);
var isHost = argList.Contains(flag.listen);
var isWorker = argList.Contains(flag.pid);
var isTest = argList.Contains(flag.test);

_logDate = macro(@{ DateTime.Now.ToString("MM-dd-yy.HH:mm:ss") });
_logArgs = macro(@{ $args @aq.skip(1) @format($args[0]) });
var log = @() print('[~Cyan~{0}~R~] {1}' :: [ _logDate(), _logArgs() ]);

head('AphidShell remoting{0}' :: [
    isClient ? ' client' :
    isWorker ? ' host worker process' :
    isHost ? ' host' :
    '' 
]);

var hostRemote = @{
    log('Starting recovery listeners');
    0..4->@+0x5232->Convert.ToUInt32->@(p) {
        var t = new Thread(@{
            while (true) {
                var exe;
                
                try exe = getExe();
                catch (e) exe = 'aphid64';

                var cmd = 'cmd.exe';

                var args =
                    '/c "' + exe + '" * ' + 
                    "#'std'; " + 
                    "#'remoting/remote'; " + 
                    "try remote.listen(0x{0:x8}).listenThread.Join();" +
                    "catch(e) " +
                    "exit(ExceptionHelper.Unwrap(e.exception).GetType() == " +
                    "SocketException ? 0xbad30 : 0xbad00)"
                    :: [ p ];

                log('Running command ~Cyan~{0} {1}~R~', cmd, args);

                var si = new ProcessStartInfo(cmd, args);
                si.UseShellExecute = false;
                si.CreateNoWindow = true;

                var proc = Process.Start(si);
                proc.WaitForExit();
                
                log(
                    'Command ~Cyan~{0} {1}~R~ exited with code ~Yellow~{2:x8}~R~',
                    cmd,
                    args,
                    proc.ExitCode);

                if (proc.ExitCode == 0xbad30) {
                    [ '0x{0:x8}', '{0}' ]->@format('%({0})%')->@{
                        var like = format($_, p);
                        log('Searching for procs like {0}', like);
                        
                        like
                        |> machine.getProcCommandsLike
                        |> Enumerable.ToArray
                        -< (@() [ $_.ParentProcessId, $_.ProcessId ])
                        -> @{
                            try {
                                var proc = $_ |> Convert.ToInt32 |> Process.GetProcessById;
                                proc.Kill();
                                proc.WaitForExit();
                            } catch (e) {
                                log('Error killing process: {0}', e.message);
                            }
                            

                        };
                    };
                }

                
                Thread.Sleep(250);
            }
        });

        t.IsBackground = true;
        t.Start();
    };

    log('Starting host');

    while (true) {
        var p = startChild();
        p.WaitForExit();
    }
};

var waitForEnter = @{
    Console.WriteLine('Press enter to continue...');
    while (Console.ReadKey(true).Key != ConsoleKey.Enter) { }
};

var startChild = @{
    var childArgs = "{0} -pid {1}" :: [
        cmd
        |> ArgLexer.GetTokenInfo
        |> Enumerable.First
        |> @.EndOffset
        |> cmd.Substring
        |> @() $_.Trim(),
        Process.GetCurrentProcess().Id
    ];

    log('Starting remote worker process with args ~Cyan~{0}~R~', childArgs);
    var p = Process.Start(getExe(), childArgs);

    ret p;
};

var watchParent = @{
    var t = new Thread(@{
        var pId = parseIntArg();
        log('Waiting for parent process ~Cyan~{0}~R~ to exit', pId);
        var p = Process.GetProcessById(pId);

        if (p != null) {
            p.WaitForExit();
            exit();
        }
    });

    t.IsBackground = true;
    t.Start();
};

var listen = @{
    log('Listening on ~Cyan~{0}~R~', remote.port);
    remote.listen();
    log('Sleeping');
    Thread.Sleep(-1);
};

var connectShell = @(host) {
    log('Connecting to remote ~Cyan~{0}~R~', host);
    var remoteShell = remote.connectProxy(host);
    
    log('Connected, initializing shell');
    remoteShell.Eval('#"Cli\\\\Shell";');
    remoteShell.BasePath = 'shell';

    log('Shell initialized, listening');
    remoteShell.listen();

    ret remoteShell;
};

var runInteractive = @(host) run(host, Console.ReadLine);

var readToPrompt = @(rs){
    var readBuffer;

    do {
        // printQuery('~Magenta~Reading out~R~');
        readBuffer = rs.readOut();

        if (readBuffer != null) {
            if (readBuffer.success defined) {
                //dump(readBuffer);
            } else {
                readBuffer |> Cli.Write;
            }                    
        } else {
            Thread.Sleep(10);
        }
    } while (readBuffer == null || !readBuffer.Trim().EndsWith('> ~R~'));

    // printQuery('~Magenta~Done reading out~R~');
};

var run = @(host, nextLine) {
    var remoteShell = connectShell(host);   

    while (true) {
        // printQuery('~Magenta~Writing prompt out~R~');
        remoteShell.writePrompt();
        readToPrompt(remoteShell);
        var line = nextLine();

        if (line != null) {
            // printQuery('~Magenta~Writing next line~R~');
            line |> remoteShell.writeInLine;
        }

        // printQuery('~Magenta~Executing next line~R~');
        if (!remoteShell.execNext()) {
            remoteShell.BasePath = 'Environment';
            remoteShell.Exit(0);
            isRunning = false;
            break;
        }
    }
};

var execRemoteScript = @(host, scriptFile) {
    using System.Collections.Generic;
    printInfo('Executing script file ~Cyan~{0}~R~', scriptFile);
    
    var lines =
        scriptFile
        |> File.ReadAllLines
        -> (@()($_.Contains('//') ? $_.Remove($_.IndexOf('//')) : $_).Trim())
        -? @!= '';

    var queue = new Queue[Object](lines);
    queue.Enqueue('using System');
    queue.Enqueue('Environment.Exit 0');

    try {
        run(
            host,
            @{
                var cmd = queue.Count > 0 ? queue.Dequeue() : null;
                Console.WriteLine(cmd);

                ret cmd;
            });
    } catch(e) {
        printError('Error executing script: {0}', e.message);
        //print(e.exception);
    }
};

if (isHost) {
    if (!isWorker) {
        hostRemote();
    } else {
        watchParent();
        listen();
    }
    
    if (isTest) {
        p.WaitForExit();
        waitForEnter();
    }
} else if (isClient) {
    var i = argList.IndexOf(flag.connect);

    if (i == argList.Count - 2) {
        getLastArg() |> runInteractive;
    } else {
        var script = argList[argList.Count - 2];
        var result = argList |> Enumerable.Last @execRemoteScript(script);

        if (result.success defined && result.success && result.out defined) {
            result.out @print('Result:\r\n{0}');
        }
    }
} else if (argList.Contains('-test')) {
    startChild();
    Thread.Sleep(500);
    runInteractive('localhost');    
} else {
    print('aphid RemoteShell.alx [-listen] [-connect {host} {file}]');
}