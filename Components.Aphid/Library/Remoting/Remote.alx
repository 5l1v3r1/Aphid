using Components.Aphid.TypeSystem;
using Components.Aphid.Serialization;
using System;

if (!this.{'$aphid'}.AsmBuilder.IsTypeDefined('RemoteProxy')) {
    class RemoteProxy { AphidFunction Connect, Guid RemoteId, string BasePath };
}

extend RemoteProxy {
    Eval: @(s, code) {
        var remote = remote._remoteTable.{s.RemoteId.ToString()};

        lock (remote) {
            ret code |> remote.eval;
        }
    },

    dynamic handle: @(s, name) {
        using System.Text;
        var sb = new StringBuilder();
        sb.Append('ret ');
        sb.Append(!String.IsNullOrEmpty(s.BasePath) ? s.BasePath + '.' + name : name);
        sb.Append('(\r\n    ');
        var firstArg = true;

        $args @aq.skip(1) -> serialize ->@(s) {
            if (firstArg) {
                firstArg = false;
            } else {
                sb.Append(', ');
            }

            s |> sb.Append;
        };

        sb.AppendLine(');');
        var remote = remote._remoteTable.{s.RemoteId.ToString()};

        lock (remote) {
            var resp = sb.ToString() |> remote.eval;
            
            ret resp != null && resp.result defined ?
                resp.result :
                { success: false, result: 'Error', obj: resp };
        }
    }
}

var remote = null;

@{
    using System;
    using System.IO;
    using System.Net;
    using System.Net.Sockets;
    using System.Text;
    //#'Core\\Threading';
    #'IO\\Compression';
    
    extend TcpClient {
        isConnected: @(c) c.Client.Poll(0, SelectMode.SelectRead) && c.Client.Available != 0,
    }

    var _rt = traceRemoting defined && traceRemoting ? Cli.WriteLine : @{ };
    var utf8 = new UTF8Encoding();

    var createClient = @(tcp) ({
        socket: tcp,
        stream: tcp.GetStream(),
        reader: new BinaryReader(stream),
        writer: new BinaryWriter(stream),
        
        read: @{
            var len = reader.ReadUInt32();
            //_rt('Receiving {0:n0} bytes', len);
            var buf = len |> Convert.ToInt32 |> reader.ReadBytes |> remote.decode;
            //_rt('{0:n0} bytes read', buf.Length);

            ret AphidObject.Scalar(buf |> utf8.GetString);
        },

        write: @(b) {
            var buf = b |> utf8.GetBytes |> remote.encode;
            [ buf.Length |> Convert.ToUInt32, buf ]->writer.Write;
        },
    });

    _isAlive = macro(@(client) { client.Connected });

    _initSerializer = macro(@(a){
        a.Serializer.QuoteToStringResults = true;
        a.Serializer.IgnoreFunctions = true;
        a.Serializer.IgnoreSpecialVariables = true;
    });

    remote = {
        port: 0x5230,

        encode: deflate.compress,
        decode: deflate.decompress,

        listen: @(port){
            var actualPort = port ?? remote.port;
            //_rt('Creating listener on port {0}', actualPort);
            

            var listener = new TcpListener(actualPort);
            var clients = [];
            
            var listenThread = new Thread(@{
                while (true) {
                    //_rt('Waiting for client');

                    try {
                        var tcp = listener.AcceptTcpClient();
                        //_rt('Client connected');
                        var c = createClient(tcp);

                        c.thread = new Thread(@{
                            var aphidClient = new AphidInterpreter();
                            _initSerializer(aphidClient);

                            var buffer;
                            var resp;
                            //_rt('Creating client thread');

                            try {
                                while (c.socket.Connected) {
                                    try {
                                        buffer = c.read();
                                    } catch (e) {
                                        //_rt('Error reading buffer: {0}', e.message);
                                        continue;
                                    }

                                    //_rt('Buffer: ~Cyan~{0}~R~', buffer);

                                    try {
                                        var o = buffer |> aphidClient.InterpretStream;
                                        resp = { result: o } |> serialize;
                                    } catch (e) {
                                        //_rt('Error serializating response: {0}', e.message);
                                        this |> serialize |> c.write;
                                    }

                                    resp |> c.write;
                                }
                            } catch (e) {
                                //_rt('Client connection error: {0}', e.message);
                            }

                            //_rt('Client disconnected');
                        });

                        c.thread.IsBackground = true;
                        c.thread.Start();

                        clients.add(c);
                    } catch (e) {
                        //_rt('Error accepting client: {0}', e.message);
                    }
                }            
            });

            listenThread.IsBackground = true;
            listenThread.Start();

            //_rt('Starting listener');
            listener.Start();

            ret { listener, clients, listenThread };
        },

        connect: @(server, port){
            if (!(server defined) || server == null) {
                fatal('Server must be specified');
            }

            //_rt('Connecting to remote session {0}', server);
            var tcp = new TcpClient();
            var actualPort = port ?? remote.port;
            tcp.Connect(server, actualPort);
            var client = createClient(tcp);
            client.server = server;
            client.port = actualPort;

            client.eval = @(exp) {
                //_rt('Writing command: ~Cyan~{0}~R~', exp.Replace('~', '~~'));
                write(exp);
                //_rt('Reading command');
                var buf = read();
                //_rt('Server response:\r\n~Magenta~{0}~R~\r\n\r\n', buf |> Cli.StyleEscape);
                ret buf |> deserialize;
            };

            client.copyFile = @(srcFilename, dstFilename)
                '
                    using System;
                    using System.IO;
                    "{0}" |> Path.GetDirectoryName |> Directory.CreateDirectory;
                    "{1}" |> Convert.FromBase64String @File.WriteAllBytes("{0}");

                    ret {{ filename: "{0}", length: (new FileInfo("{0}")).Length }};
                '
                :: [
                    (dstFilename defined ? dstFilename : srcFilename).Replace('\\', '\\\\'),
                    srcFilename |> File.ReadAllBytes |> Convert.ToBase64String
                ]
                |> eval;

            //_rt('Connected to remote session');

            ret client;
        },
        _remoteTable: {},
        
        connectProxy: @(server, port) {
            var proxy = new RemoteProxy();
            proxy.RemoteId = Guid.NewGuid();
            remote._remoteTable.{proxy.RemoteId.ToString()} = remote.connect(server, port);

            ret proxy;
        }
    };
}();