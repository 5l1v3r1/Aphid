@{
    #'IO';
    using System;
    using System.IO;
    using System.Reflection;
    using Components.External.ConsolePlus;
    var dv = deployVerbosity defined ? deployVerbosity : 1;
    // cls();
    var _print = dv != 0 ? Cli.WriteLine : @{};
    //_print = @{};
    var scriptDir = Assembly.GetExecutingAssembly().Location |> io.up;
    var cur = scriptDir;

    if (aphidSource defined) cur = new DirectoryInfo(aphidSource);

    cur @_print('Script dir: ~Green~{0}~R~');
    var src;
    

    do
    {
        var search = io.join(cur, 'Components.Aphid', 'Library', 'Std.alx');

        if (dv > 1) {
            search @_print('Checking dir: ~Cyan~{0}~R~');
        }

        if (search | io.file) {
            src = search | io.up;
            src @_print('Found source dir: ~Green~{0}~R~');
            break;
        }

    } while ((cur = cur | io.up) != null);

    if (src == null) {
        _print('~Yellow~Could not find library dir~R~');
        exit(0);
    }

    _print('[~Green~+~R~] Updating standard headers');

     var dst = (scriptDir \ 'Library');
     var si = new ProcessStartInfo('cmd', string.Format('/c xcopy /e /s /d /y "{0}\\*.alx" "{1}"', src, dst));
     si.UseShellExecute = false;
     var proc = Process.Start(si);
     proc.WaitForExit();

    _print('Done');
}();