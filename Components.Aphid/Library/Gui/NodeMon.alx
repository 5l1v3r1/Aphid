nuget.reference('LiveCharts');
nuget.reference('LiveCharts.Geared');
nuget.reference('LiveCharts.Wpf');

using LiveCharts;
using LiveCharts.Configurations;
using LiveCharts.Geared;

var sleepTime = 1000;
var maxValues = 100;

class RuntimeMetrics { Double CounterValue, Int64 Ticks };

class of Decimal LiveChart {
    Object CpuChartValues,
    Object RamChartValues,
    Double LastCpuPct,
    Double LastRamPct,
    Int32 ActiveNodes,
    Nodes,
    Cores,
    Ram,
    Double AxisMin,
    Double AxisMax,
    Double AxisStep,
    Double AxisUnit
};

var RuntimeMetricsViewModel = viewModelLoader.loadFor(RuntimeMetrics);
var ChartViewModel = viewModelLoader.loadFor(LiveChart);

var unwrap = aphid.ValueHelper.Unwrap;
var mapper = Mappers.Xy.Members[0].MakeGenericMethod([RuntimeMetricsViewModel]).Invoke(null, [])
    .X(@() $_.Ticks |> Convert.ToDouble)
    .Y(@() $_.CounterValue |> unwrap);

Charting.For.Members[0]
    .MakeGenericMethod([RuntimeMetricsViewModel])
    .Invoke(null, [mapper, SeriesOrientation.All]);

var chartVM = new ChartViewModel();
chartVM.Nodes = 0;
chartVM.Cores = 0;
chartVM.Ram = 0;

chartVM.CpuChartValues = new GearedValues[RuntimeMetricsViewModel]();
chartVM.RamChartValues = new GearedValues[RuntimeMetricsViewModel]();
chartVM.AxisStep = TimeSpan.FromSeconds(1).Ticks |> Convert.ToDouble;
chartVM.AxisUnit = TimeSpan.TicksPerSecond |> Convert.ToDouble;

var _setAxisLimits = @(now, ahead, behind) {
    chartVM.AxisMax = now + 10000000;
    chartVM.AxisMin = now - 600000000;
};

var fillerTicks = DateTime.UtcNow.Ticks;
var filler = 0..maxValues |> Enumerable.Reverse ->@{
    var fillerVM = new RuntimeMetricsViewModel();
    fillerVM.CounterValue = 0;
    fillerVM.Ticks = fillerTicks - sleepTime * 10000 * $_;

    ret fillerVM;
};

chartVM.CpuChartValues.AddRange(filler);
chartVM.RamChartValues.AddRange(filler);

_setAxisLimits(DateTime.UtcNow.Ticks);

var createNodeMon = @() {
    var lm = wpf.loadXaml(
        '<UserControl xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:lvc="clr-namespace:LiveCharts.Wpf;assembly=LiveCharts.Wpf"
                    xmlns:geared="clr-namespace:LiveCharts.Geared;assembly=LiveCharts.Geared"
                    mc:Ignorable="d"
                    d:DesignHeight="300" d:DesignWidth="300">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="*"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                </Grid.RowDefinitions>
                <lvc:CartesianChart
                    Grid.Row="1"
                    AnimationsSpeed="00:00:00.3"
                    DisableAnimations="False"
                    Hoverable="False"
                    DataTooltip="{x:Null}">
                    <lvc:CartesianChart.Resources>
                        <Style TargetType="{x:Type geared:GLineSeries}">
                            <Setter Property="PointGeometry" Value="{x:Null}" />
                            <Setter Property="LineSmoothness" Value="0.1" />
                            <Setter Property="AreaLimit" Value="-1" />
                            <Setter Property="StrokeThickness" Value="2" />                    
                        </Style>
                    </lvc:CartesianChart.Resources>
                    <lvc:CartesianChart.Series>
                        <geared:GLineSeries Values="{Binding CpuChartValues}" Stroke="#F34336" />
                        <geared:GLineSeries Values="{Binding RamChartValues}" Stroke="#4336F3" />
                    </lvc:CartesianChart.Series>
                    <lvc:CartesianChart.AxisX>
                        <lvc:Axis ShowLabels="False">
                            <lvc:Axis.Separator>
                                <lvc:Separator Step="{Binding AxisStep}" />
                            </lvc:Axis.Separator>
                        </lvc:Axis>
                    </lvc:CartesianChart.AxisX>
                    <lvc:CartesianChart.AxisY>
                        <lvc:Axis MaxValue="102" MinValue="0" ShowLabels="True">
                            <lvc:Axis.Separator>
                                <lvc:Separator Step="10" />
                            </lvc:Axis.Separator>
                        </lvc:Axis>
                    </lvc:CartesianChart.AxisY>
                </lvc:CartesianChart>
                <Grid Grid.Row="2">
                    <Grid.Resources>
                        <Style TargetType="TextBlock">
                            <Setter Property="FontSize" Value="16" />
                        </Style>
                        <Style TargetType="Grid">
                            <Setter Property="VerticalAlignment" Value="Center" />
                            <Setter Property="Margin" Value="0, 0, 0, 8" />
                        </Style>
                        <Style x:Key="ValueText" TargetType="TextBlock">
                            <Setter Property="Margin" Value="0, 0, 30, 0" />
                            <Setter Property="Foreground" Value="#303030" />
                            <Setter Property="HorizontalAlignment" Value="Right" />
                            <Setter Property="VerticalAlignment" Value="Center" />
                            <Setter Property="FontSize" Value="16" />
                        </Style>
                    </Grid.Resources>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="95" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="69" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="0" Margin="10,0,0,0" Opacity=".4">Nodes</TextBlock>
                    <TextBlock Grid.Column="1" Style="{StaticResource ValueText}" Margin="10, 0, 30, 0">
                        <TextBlock.Text>
                            <MultiBinding StringFormat="{}{0}/{1}">
                                <Binding Path="ActiveNodes" />
                                <Binding Path="Nodes" />
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                    <TextBlock Grid.Column="2" Opacity=".4">Cores</TextBlock>
                    <TextBlock Grid.Column="3" Style="{StaticResource ValueText}" Margin="10, 0, 30, 0"
                            Text="{Binding Cores, StringFormat=\\{0:#\\,##0\\}}" />
                    <TextBlock Grid.Column="4" Opacity=".4">CPU</TextBlock>
                    <TextBlock Grid.Column="5" Style="{StaticResource ValueText}"
                            Text="{Binding LastCpuPct, StringFormat=\\{0\\,8:N2\\}%}" />
                    <TextBlock Grid.Column="6" Opacity=".4">RAM</TextBlock>
                    <TextBlock Grid.Column="7" Style="{StaticResource ValueText}" Margin="0,0,0,0"                       
                            Text="{Binding LastRamPct, StringFormat=\\{0\\,8:N2\\}% }" />
                    <TextBlock Grid.Column="8"  Style="{StaticResource ValueText}" Margin="4,0,0,0"
                            HorizontalAlignment="Left"
                            Foreground="#303030" Text="{Binding Ram, StringFormat= (\\{0:N2\\}GB Total)}" />
                    
                </Grid>
            </Grid>
        </UserControl>
    ');

    lm.DataContext = chartVM;

    ret lm;
};

var createNodeMonWindow = @()
    wpf.createAppAsync(@{
        var w = $_.window;
        w.Title = 'Node Monitor';
        w.BorderThickness = new Thickness(1);        
        w.WindowStyle = WindowStyle.ToolWindow;
        w.Topmost = true;
        w.Content = createNodeMon();
        w.Width = 600;
        w.Height = 300;
    });

var startNodeMonServices = @{
    print('Starting');
    var nodes = ['node1','node2','node3','john-pc'];

    var startBackgroundThread = @(f) {
        var t = new Thread(f);
        t.IsBackground = true;
        t.Start();

        ret t;
    };

    using System.Net;
    using System.Net.Sockets;

    _cacheType = macro(@(name) { this[quote(name)] = name });
    _cacheType(TcpListener);
    _cacheType(HashSet);
    _cacheType(AutoResetEvent);
    _cacheType(BinaryReader);
    _cacheType(Thread);
    _cacheType(Convert);
    _cacheType(DateTime);

    var i = true;
    var listenerThread = startBackgroundThread(@{
        var tcpListener = new TcpListener(IPAddress.Any, 52300);
        tcpListener.Start();

        var nodesConnected = new HashSet[String]();
        var aggrTicks = 0;
        var aggrCpu = 0;
        var aggrRam = 0;
        var sendReset = new AutoResetEvent(false);
        var resumeReset = new AutoResetEvent(false);
        var nodesReady = new HashSet[String]();

        var aggrThread = startBackgroundThread(@{
            while (true) {
                var cpuVM = new RuntimeMetricsViewModel();
                var ramVM = new RuntimeMetricsViewModel();

                sendReset.WaitOne();
                
                var an = nodesReady.Count;
                cpuVM.Ticks = aggrTicks / an;
                ramVM.Ticks = cpuVM.Ticks;
                var c = nodesConnected.Count;
                cpuVM.CounterValue = aggrCpu / c;        
                ramVM.CounterValue = aggrRam / c;
                
                aggrTicks = 0;
                aggrCpu = 0;
                aggrRam = 0;
                nodesReady.Clear();

                chartVM.ActiveNodes = an;
                chartVM.CpuChartValues.Add(cpuVM);
                chartVM.RamChartValues.Add(ramVM);
                chartVM.LastCpuPct = cpuVM.CounterValue;
                chartVM.LastRamPct = ramVM.CounterValue;

                if (chartVM.CpuChartValues.Count > maxValues) {
                    chartVM.CpuChartValues.RemoveAt(0);
                    chartVM.RamChartValues.RemoveAt(0);
                }

                resumeReset.Set();
            }
        });

        while (true) {
            var client = tcpListener.AcceptTcpClient();
            
            var clientThread = startBackgroundThread(@{
                var stream = client.GetStream();
                var reader = new BinaryReader(stream);
                var writer = new BinaryWriter(stream);
                var blob = reader.ReadString();            
                var nodeName;

                lock (nodesConnected) {
                    blob |> print;
                    var nodeInfo = blob |> deserialize;
                    nodeName = nodeInfo.name;
                    nodesConnected.Add(nodeName);
                    chartVM.Nodes += 1;
                    chartVM.Cores += nodeInfo.cores;
                    chartVM.Ram += (nodeInfo.memory / 1024 / 1024 / 1024);
                }

                while (true) {
                    var cpu = reader.ReadInt16() / 100;
                    var ram = reader.ReadInt16() / 100;
                    var ticks = DateTime.UtcNow.Ticks;
                    
                    var tries = 0;
                    var trySleep = 100;
                    var maxTries = sleepTime / trySleep * 2;

                    while (true) {
                        lock (nodesReady) {
                            if (nodesReady.Contains(nodeName)) {
                                if (nodesConnected.Count == nodesReady.Count || tries >= maxTries) {
                                    sendReset.Set();
                                    resumeReset.WaitOne();
                                    nodesReady.Add(nodeName);
                                    aggrCpu += cpu;
                                    aggrRam += ram;
                                    aggrTicks += ticks;
                                    break;
                                }
                            } else {
                                nodesReady.Add(nodeName);
                                aggrCpu += cpu;
                                aggrRam += ram;
                                aggrTicks += ticks;
                                break;
                            }
                        }

                        tries++;
                        // print('Sleep # {0}', tries);
                        Thread.Sleep(trySleep);
                    }

                    0x1 |> Convert.ToByte |> writer.Write;
                }
            });
        }
    });

    #'Core/Threading';
    
    nodes>~@{
        #'Remoting/Remote';
        var c = remote.connect($_, 0x5232);
        
        try {
            using (c.socket) {
                c.eval("
                    #'Std';
                    #'System/Process';
                    Process.Start(
                        'cmd.exe',
                        '/c start aphid64 * #\\'std\\'; #\\'remoting/remote\\'; remote.listen(0x5231).listenThread.Join();');

                    exit();
                ");
            }
        } catch (e) {
            printInfo('Expected error: {0}', e.message);
        }

        c = remote.connect($_, 0x5232);

        c.eval("
            using System.Threading;
            
            var cpuCounterThread = new Thread(@{
                #'Std';
                #'System/Machine';
                
                using System.Diagnostics;
                using System.Net.Sockets;
                
                var memory = machine.getMemory();
                var cores = machine.getLogicalProcessorCount();
                var name = Environment.MachineName;
                var text = {name, cores, memory} |> serialize;
                
                var client = new TcpClient();
                client.Connect('" + Environment.MachineName + "', 52300);
                var stream = client.GetStream();
                var reader = new BinaryReader(stream);
                var writer = new BinaryWriter(stream);
                text |> writer.Write;
                                
                try {
                    var cpuCounter = new PerformanceCounter('Processor', '% Processor Time', '_Total');
                    var ramCounter = new PerformanceCounter('Memory', 'Available MBytes');
                    var _toShort = Convert.ToInt16;
                    var _write = writer.Write;
                    var _delay = Thread.Sleep;
                    var _nextCpu = cpuCounter.NextValue;
                    var _nextRam = ramCounter.NextValue;
                    var _readByte = reader.ReadByte;

                    while(true) {
                        writer.Write(_toShort(_nextCpu() * 100));
                        writer.Write(_toShort((memory - _nextRam() * 0x100000) / memory * 100 * 100));
                        _delay(" + sleepTime + ");
                        _readByte();
                    }
                } catch {
                    exit();
                }
            });

            cpuCounterThread.IsBackground = true;
            cpuCounterThread.Start();
        ");
    };

    console.hide();
};

