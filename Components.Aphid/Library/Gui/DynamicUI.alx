#'System/Process';
#'System/Nuget';
#'Meta/Code/Compiler';
#'Meta/Code/ViewModelCompiler';
#'Gui/Wpf';
#'Gui/OxyPlot';

printInfo('Loading Nuget references');
var asms =
    [ 'Extended.Wpf.Toolkit', 'System.Windows.Controls.DataVisualization.Toolkit' ]
    -< nuget.reference;

printSuccess('Done loading references: {0}', asms |> serialize);

var dynamicViewType = { dataGrid: 1, barGraph: 100, };

class DynamicView {
    int ViewType,
    string Name,
    string list Columns,
    string list Associations,
    AphidFunction LoadData,
    Type ViewModelType
};

var loadDocking = @() XamlReader.Parse('
    <Grid
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:s="clr-namespace:System;assembly=mscorlib"
        xmlns:dg="clr-namespace:System.Windows.Controls;assembly=PresentationFramework"
        xmlns:dg2="clr-namespace:Xceed.Wpf.DataGrid;assembly=Xceed.Wpf.DataGrid"
        xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">
        <xcad:DockingManager AllowMixedOrientation="True"
                        BorderBrush="Black"                        
                        BorderThickness="1">
            <!--<xcad:DockingManager.LayoutItemContainerStyle>
                <Style TargetType="{x:Type xcad:LayoutItem}">
                    <Setter Property="Title" Value="{Binding Model.Title}" />
                    <Setter Property="CloseCommand" Value="{Binding Model.CloseCommand}" />
                    <Setter Property="CanClose" Value="{Binding Model.CanClose}" />
                </Style>
            </xcad:DockingManager.LayoutItemContainerStyle>-->
            <!--<xcad:DockingManager.DocumentHeaderTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Image Source="{Binding IconSource}" Margin="0,0,4,0" />
                        <TextBlock Text="{Binding Title}" />
                    </StackPanel>
                </DataTemplate>
            </xcad:DockingManager.DocumentHeaderTemplate>-->
            <xcad:LayoutRoot x:Name="_layoutRoot">
                <xcad:LayoutPanel Orientation="Horizontal">
                    <!--<xcad:LayoutAnchorablePane DockWidth="200">
                        <xcad:LayoutAnchorable ContentId="properties"
                                Title="Properties"
                                CanHide="False"
                                CanClose="False"
                                AutoHideWidth="240">
                            <xctk:PropertyGrid NameColumnWidth="110"
                                            SelectedObject="{Binding SelectedItem}"
                                            AutoGenerateProperties="True"
                                            IsReadOnly="True" />
                        </xcad:LayoutAnchorable>
                    </xcad:LayoutAnchorablePane>-->
                    <xcad:LayoutDocumentPaneGroup>
                        <xcad:LayoutDocumentPane x:Name="DocPane">
                            <!--<xcad:LayoutDocument ContentId="document1"
                                Title="Document 1"
                                    IsActive="True">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="20" />
                                        <RowDefinition />
                                        </Grid.RowDefinitions>
                                        <TextBox IsReadOnly="True" Text="{Binding Filename}" />
                                        <dg:DataGrid x:Name="DataGrid" Grid.Row="1"
                                                    IsReadOnly="True"
                                                    SelectedItem="{Binding SelectedItem}"
                                                    ItemsSource="{Binding Records}">
                                        </dg:DataGrid>
                                    </Grid>

                                </xcad:LayoutDocument>-->
                            </xcad:LayoutDocumentPane>
                        </xcad:LayoutDocumentPaneGroup>
                </xcad:LayoutPanel>
                <!--<xcad:LayoutRoot.LeftSide>
                    <xcad:LayoutAnchorSide>
                        <xcad:LayoutAnchorGroup>
                            <xcad:LayoutAnchorable Title="Agenda"
                                        ContentId="agenda">
                                <TextBlock Text="Agenda Content"
                                    Margin="10"
                                    FontSize="18"
                                    FontWeight="Black"
                                    TextWrapping="Wrap" />
                                    </xcad:LayoutAnchorable>
                                    <xcad:LayoutAnchorable Title="Contacts"
                                        ContentId="contacts">
                                <TextBlock Text="Contacts Content"
                                    Margin="10"
                                    FontSize="18"
                                    FontWeight="Black"
                                    TextWrapping="Wrap" />
                            </xcad:LayoutAnchorable>
                        </xcad:LayoutAnchorGroup>
                    </xcad:LayoutAnchorSide>
                </xcad:LayoutRoot.LeftSide>-->
            </xcad:LayoutRoot>
        </xcad:DockingManager>
    </Grid>
');

var viewModelLoader = {
    vmTable: new Dictionary[Type, Type](),
    assocTable: new Dictionary[Type, List[ViewModelAssociation]](),

    loadFor: @(type) {
        if (vmTable.ContainsKey(type)){
            ret vmTable.get_Item(type);
        } else {
            var v = viewModel.buildForType('AphidUI.ViewModels', type);
            vmTable.Add(type, v);

            var assocs = v |> bind.fanPaths |> bind.flattenPaths;
            assocTable.Add(type, assocs.flattenedPaths);

            ret v;
        }
    }
};

var viewController = {
    table: new Dictionary[string, DynamicView](),
    app: null,
    autobind: true,

    init: @{
        app = wpf.createAppAsync();
        wait = app.waitForExit;

        app.invoke(@{
            using Xceed.Wpf.AvalonDock.Layout;
            using System.Linq;
            var docking = loadDocking();
            app.window.Content = docking;
            pane = docking.FindName('DocPane');
            // print('~Yellow~Pane: {0}~R~', pane);
        });
    },

    pane: null,

    wait: null,

    addBarGraphView: @(name, loadData) {
        var view = new DynamicView();
        view.ViewType = dynamicViewType.barGraph;
        view.Name = name;
        view.LoadData = loadData;        
        table.Add(view.Name, view);
    },

    addListView: @(name, columns, associations, loadData, rowType) {
        var view = new DynamicView();
        view.ViewType = dynamicViewType.dataGrid;
        view.Name = name;
        
        if (associations != null) {
            view.Associations = new List[string](associations #!);
            associations->view.Associations.Add;
        }
        
        if (columns != null ) {
            view.Columns = new List[string](columns #!);
            columns->view.Columns.Add;
        }

        view.LoadData = loadData;
        view.ViewModelType = viewModelLoader.loadFor(rowType);
        table.Add(view.Name, view);
    },
    
    navigate: @(view, navContext) {
        var dynView;

        if (view == null ||
            (view.GetType() != DynamicView && view.GetType() != string)) {
            fatal('Expected argument view to be of type string or DynamicView');
        } else if (view.GetType() == string) {
            if (!table.ContainsKey(view)) {
                fatal('Could not find DynamicView with key {0}' :: view);
            }

            dynView = table.get_Item(view);
        } else {
            dynView = view;
        }

        app.invoke(@()
            ($(dynView.ViewType)
                dynamicViewType.dataGrid: renderDataGrid,
                dynamicViewType.barGraph: renderBarGraph)(dynView, navContext));
    },

    renderDataGrid: @(dynView, navContext) {
        printInfo('Rendering DataGrid view');
        var dg = app.createDataGrid();
        wpf.bindingMode = BindingMode.OneWay;

        printQuery('Configuring DataGrid columns');

        if (dynView.Columns != null) {
            printInfo('Adding specified columns');
            dg.AutoGenerateColumns = false;
            dynView.Columns->@() wpf.dataGrid.addTextColumn(dg, $_, $_);
        } else {
            printInfo('Auto-generating columns');
            dg.Columns.Clear();
            dg.AutoGenerateColumns = true;
        }

        printQuery('Checking for dynamic view associations');

        if (dynView.Associations != null) {
            printInfo('Configuring dynamic view association columns');

            dynView.Associations->@(name)
                wpf.dataGrid.addButtonColumn(
                    dg,
                    name,
                    icons.openView(),
                    //'Open',
                    null,
                    @(sender, e) {
                        viewController.navigate(name, sender.DataContext);
                    });            
        }
        
        _loadData();
        
        printInfo('Binding view data');

        if (autobind) {
            dg.ItemsSource = vmData
                ->@bind.typeToViewModel(dynView.ViewModelType)
                |> Enumerable.AsEnumerable;
        } else {
            dg.ItemsSource = vmData;
        }

        addDoc(dynView, dg);
        
        printSuccess('Done rendering DataGrid view');
    },

    renderBarGraph: @(dynView, navContext) {
        printInfo('Rendering BarGraph view');
        _loadData();
        
        printInfo('Creating plot view control');
        var view = createLinearBarModel(vmData);
        var grid = new Grid();
        grid.Children.Add(view);
        addDoc(dynView, grid);

        printSuccess('Done rendering BarGraph view');        
    },

    addDoc: @(dynView, content) {
        using Xceed.Wpf.AvalonDock.Layout;

        printInfo('Creating layout document for pane');
        var doc = new LayoutDocument();
        doc.Title = dynView.Name;
        doc.ContentId = dynView.Name;
        doc.Content = content;
        doc.IsActive = true;
        
        printInfo('Adding layout document to pane');
        pane.Children.Add(doc);
        doc.IsActive = false;
        
        printSuccess('Pane successfully updated');
    },

    icons: {
        openView: @() XamlReader.Parse('
            <Viewbox 
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"  
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
                xmlns:d="http://schemas.microsoft.com/expression/blend/2008"  
                xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                Width="16" Height="16">
                <Rectangle Width="16" Height="16">
                    <Rectangle.Fill>
                        <DrawingBrush>
                            <DrawingBrush.Drawing>
                                <DrawingGroup>
                                    <DrawingGroup.Children>
                                        <GeometryDrawing Brush="#00FFFFFF" Geometry="F1M16,16L0,16 0,0 16,0z" />
                                        <GeometryDrawing Brush="#FFF6F6F6" Geometry="F1M1.9998,-0.000199999999999534L2.8548,0.9998 -0.000199999999999978,0.9998 -0.000199999999999978,15.9998 15.9998,15.9998 15.9998,0.9998 7.8528,0.9998 6.9998,-0.000199999999999534z" />
                                        <GeometryDrawing Brush="#FF414141" Geometry="F1M8.7046,2L9.5566,3 13.9996,3 13.9996,14 1.9996,14 1.9996,8.649C1.6266,8.47,1.2866,8.235,0.999599999999999,7.942L0.999599999999999,15 14.9996,15 14.9996,2z" />
                                        <GeometryDrawing Brush="#FF414141" Geometry="F1M4,11L6,11 6,12 4,12z M7,11L9,11 9,12 7,12z M7,9L9,9 9,10 7,10z M10,11L12,11 12,12 10,12z M10,9L12,9 12,10 10,10z M10,7L12,7 12,8 10,8z M13,13L13,4 9.586,4 7,7 9,7 9,8 7,8 7,7 6,7 6,8 5,8 5,9 6,9 6,10 4,10 4,9 3.5,9C3.329,9,3.165,8.973,3,8.949L3,13z" />
                                        <GeometryDrawing Brush="#FFF0EFF1" Geometry="F1M6,7L5,7 5,8 6,8z" />
                                        <GeometryDrawing Brush="#FFF0EFF1" Geometry="F1M14,14L14,3 9.557,3 10,3.52 9.586,4 13,4 13,13 3,13 3,8.949C2.646,8.898,2.312,8.798,2,8.649L2,14z" />
                                        <GeometryDrawing Brush="#FF00529C" Geometry="F1M6,1L4,1 5.988,3 3.5,3C2.119,3 1,4.119 1,5.5 1,6.881 2.119,8 3.5,8L4,8 4,7 3.5,7C2.673,7 2,6.327 2,5.5 2,4.673 2.673,4 3.5,4L6.013,4 4,6 6,6 8.5,3.515z" />
                                        <GeometryDrawing Brush="#FFF0EFF1" Geometry="F1M5.0004,8.9998L3.9994,8.9998 3.9994,9.9998 6.0004,9.9998 6.0004,8.9998z" />
                                        <GeometryDrawing Brush="#FFF0EFF1" Geometry="F1M5,8L6,8 6,7 5,7z" />
                                        <GeometryDrawing Brush="#FFF0EFF1" Geometry="F1M7,12L9,12 9,10.999 7,10.999z" />
                                        <GeometryDrawing Brush="#FFF0EFF1" Geometry="F1M7,8L9,8 9,7 7,7z" />
                                        <GeometryDrawing Brush="#FFF0EFF1" Geometry="F1M4,12L6.001,12 6.001,10.999 4,10.999z" />
                                        <GeometryDrawing Brush="#FFF0EFF1" Geometry="F1M10,12L12,12 12,10.999 10,10.999z" />
                                        <GeometryDrawing Brush="#FFF0EFF1" Geometry="F1M7,10L9,10 9,9 7,9z" />
                                        <GeometryDrawing Brush="#FFF0EFF1" Geometry="F1M10,8L12,8 12,7 10,7z" />
                                        <GeometryDrawing Brush="#FFF0EFF1" Geometry="F1M10,10L12,10 12,9 10,9z" />
                                        <GeometryDrawing Brush="#FFF0EFF1" Geometry="F1M9.5566,3L9.9996,3.52 9.5856,4 12.9996,4 12.9996,13 2.9996,13 2.9996,8.949C2.6466,8.898,2.3116,8.798,1.9996,8.649L1.9996,14 13.9996,14 13.9996,3z" />
                                    </DrawingGroup.Children>
                                </DrawingGroup>
                            </DrawingBrush.Drawing>
                        </DrawingBrush>
                    </Rectangle.Fill>
                </Rectangle>            
            </Viewbox>
        ')
    },
};

_loadData = macro(@{
    printInfo('Loading view data');
    var vmData;

    if (navContext defined) {
        vmData = navContext |> dynView.LoadData;
    } else {
        vmData = dynView.LoadData();
    }
});
