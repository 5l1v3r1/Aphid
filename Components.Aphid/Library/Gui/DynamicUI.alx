
#'Gui/Wpf';
#'Meta/Code/Compiler';
#'Meta/Code/ViewModelCompiler';
#'System/Process';
#'System/Nuget';
printInfo('Loading Nuget references');
var asms =
    [ 'Extended.Wpf.Toolkit', 'System.Windows.Controls.DataVisualization.Toolkit' ]
    -< nuget.reference;

printSuccess('Done loading references: {0}', asms |> serialize);

var dynamicViewType = { dataGrid: 1, barGraph: 100, };

class DynamicView {
    int ViewType,
    string Name,
    string list Columns,
    string list Associations,
    AphidFunction LoadData,
    Type ViewModelType
};

var loadDocking = @() XamlReader.Parse('
    <Grid
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:s="clr-namespace:System;assembly=mscorlib"
        xmlns:dg="clr-namespace:System.Windows.Controls;assembly=PresentationFramework"
        xmlns:dg2="clr-namespace:Xceed.Wpf.DataGrid;assembly=Xceed.Wpf.DataGrid"
        xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">
        <xcad:DockingManager AllowMixedOrientation="True"
                        BorderBrush="Black"                        
                        BorderThickness="1">
            <!--<xcad:DockingManager.LayoutItemContainerStyle>
                <Style TargetType="{x:Type xcad:LayoutItem}">
                    <Setter Property="Title" Value="{Binding Model.Title}" />
                    <Setter Property="CloseCommand" Value="{Binding Model.CloseCommand}" />
                    <Setter Property="CanClose" Value="{Binding Model.CanClose}" />
                </Style>
            </xcad:DockingManager.LayoutItemContainerStyle>-->
            <!--<xcad:DockingManager.DocumentHeaderTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Image Source="{Binding IconSource}" Margin="0,0,4,0" />
                        <TextBlock Text="{Binding Title}" />
                    </StackPanel>
                </DataTemplate>
            </xcad:DockingManager.DocumentHeaderTemplate>-->
            <xcad:LayoutRoot x:Name="_layoutRoot">
                <xcad:LayoutPanel Orientation="Horizontal">
                    <!--<xcad:LayoutAnchorablePane DockWidth="200">
                        <xcad:LayoutAnchorable ContentId="properties"
                                Title="Properties"
                                CanHide="False"
                                CanClose="False"
                                AutoHideWidth="240">
                            <xctk:PropertyGrid NameColumnWidth="110"
                                            SelectedObject="{Binding SelectedItem}"
                                            AutoGenerateProperties="True"
                                            IsReadOnly="True" />
                        </xcad:LayoutAnchorable>
                    </xcad:LayoutAnchorablePane>-->
                    <xcad:LayoutDocumentPaneGroup>
                        <xcad:LayoutDocumentPane x:Name="DocPane">
                            <!--<xcad:LayoutDocument ContentId="document1"
                                Title="Document 1"
                                    IsActive="True">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="20" />
                                        <RowDefinition />
                                        </Grid.RowDefinitions>
                                        <TextBox IsReadOnly="True" Text="{Binding Filename}" />
                                        <dg:DataGrid x:Name="DataGrid" Grid.Row="1"
                                                    IsReadOnly="True"
                                                    SelectedItem="{Binding SelectedItem}"
                                                    ItemsSource="{Binding Records}">
                                        </dg:DataGrid>
                                    </Grid>

                                </xcad:LayoutDocument>-->
                            </xcad:LayoutDocumentPane>
                        </xcad:LayoutDocumentPaneGroup>
                </xcad:LayoutPanel>
                <!--<xcad:LayoutRoot.LeftSide>
                    <xcad:LayoutAnchorSide>
                        <xcad:LayoutAnchorGroup>
                            <xcad:LayoutAnchorable Title="Agenda"
                                        ContentId="agenda">
                                <TextBlock Text="Agenda Content"
                                    Margin="10"
                                    FontSize="18"
                                    FontWeight="Black"
                                    TextWrapping="Wrap" />
                                    </xcad:LayoutAnchorable>
                                    <xcad:LayoutAnchorable Title="Contacts"
                                        ContentId="contacts">
                                <TextBlock Text="Contacts Content"
                                    Margin="10"
                                    FontSize="18"
                                    FontWeight="Black"
                                    TextWrapping="Wrap" />
                            </xcad:LayoutAnchorable>
                        </xcad:LayoutAnchorGroup>
                    </xcad:LayoutAnchorSide>
                </xcad:LayoutRoot.LeftSide>-->
            </xcad:LayoutRoot>
        </xcad:DockingManager>
    </Grid>
');

var viewModelLoader = {
    vmTable: new Dictionary[Type, Type](),
    assocTable: new Dictionary[Type, List[ViewModelAssociation]](),

    loadFor: @(type) {
        if (vmTable.ContainsKey(type)){
            ret vmTable.get_Item(type);
        } else {
            var v = viewModel.buildForType('AphidUI.ViewModels', type);
            vmTable.Add(type, v);

            var assocs = v |> bind.fanPaths |> bind.flattenPaths;
            assocTable.Add(type, assocs.flattenedPaths);

            ret v;
        }
    }
};

var viewController = {
    table: new Dictionary[string, DynamicView](),
    app: null,

    init: @{
        app = wpf.createAppAsync();
        wait = app.waitForExit;

        app.invoke(@{
            using Xceed.Wpf.AvalonDock.Layout;
            using System.Linq;
            var docking = loadDocking();
            app.window.Content = docking;
            pane = docking.FindName('DocPane');
            // print('~Yellow~Pane: {0}~R~', pane);
        });
    },

    pane: null,

    wait: null,

    addBarGraphView: @(name, loadData) {
        var view = new DynamicView();
        view.ViewType = dynamicViewType.barGraph;
        view.Name = name;
        view.LoadData = loadData;        
        table.Add(view.Name, view);
    },

    addListView: @(name, columns, associations, loadData, rowType) {
        var view = new DynamicView();
        view.ViewType = dynamicViewType.dataGrid;
        view.Name = name;
        
        if (associations != null) {
            view.Associations = new List[string](associations #!);
            associations->view.Associations.Add;
        }
        
        if (columns != null ) {
            view.Columns = new List[string](columns #!);
            columns->view.Columns.Add;
        }

        view.LoadData = loadData;
        view.ViewModelType = viewModelLoader.loadFor(rowType);
        table.Add(view.Name, view);
    },
    
    navigate: @(view, navContext) {
        var dynView;

        if (view == null ||
            (view.GetType() != DynamicView && view.GetType() != string)) {
            fatal('Expected argument view to be of type string or DynamicView');
        } else if (view.GetType() == string) {
            if (!table.ContainsKey(view)) {
                fatal('Could not find DynamicView with key {0}' :: view);
            }

            dynView = table.get_Item(view);
        } else {
            dynView = view;
        }

        app.invoke(@()
            ($(dynView.ViewType)
                dynamicViewType.dataGrid: renderDataGrid,
                dynamicViewType.barGraph: renderBarGraph)(dynView, navContext));
    },

    renderDataGrid: @(dynView, navContext) {
        printInfo('Rendering DataGrid view');
        var dg = app.createDataGrid();
        wpf.bindingMode = BindingMode.OneWay;

        printQuery('Configuring DataGrid columns');

        if (dynView.Columns != null) {
            printInfo('Adding specified columns');
            dg.AutoGenerateColumns = false;
            dynView.Columns->@() wpf.dataGrid.addTextColumn(dg, $_, $_);
        } else {
            printInfo('Auto-generating columns');
            dg.Columns.Clear();
            dg.AutoGenerateColumns = true;
        }

        printQuery('Checking for dynamic view associations');

        if (dynView.Associations != null) {
            printInfo('Configuring dynamic view association columns');

            dynView.Associations->@(name)
                wpf.dataGrid.addButtonColumn(
                    dg,
                    name,
                    'Open',
                    50,
                    @(sender, e) {
                        viewController.navigate(name, sender.DataContext);
                    });            
        }
        
        _loadData();
        
        printInfo('Binding view data');

        dg.ItemsSource = vmData
            ->@bind.typeToViewModel(dynView.ViewModelType)
            |> Enumerable.AsEnumerable;

        addDoc(dynView, dg);
        
        printSuccess('Done rendering DataGrid view');
    },

    renderBarGraph: @(dynView, navContext) {
        printInfo('Rendering BarGraph view');
        printInfo('Loading view data');
        var vmData;

        if (navContext defined) {
            vmData = navContext |> dynView.LoadData;
        } else {
            vmData = dynView.LoadData();
        }
        
        printInfo('Creating plot view control');
        var view = createLinearBarModel(vmData);
        var grid = new Grid();
        grid.Children.Add(view);
        addDoc(dynView, grid);

        printSuccess('Done rendering BarGraph view');        
    },

    addDoc: @(dynView, content) {
        using Xceed.Wpf.AvalonDock.Layout;

        printInfo('Creating layout document for pane');
        var doc = new LayoutDocument();
        doc.Title = dynView.Name;
        doc.ContentId = dynView.Name;
        doc.Content = content;
        doc.IsActive = true;
        
        printInfo('Adding layout document to pane');
        pane.Children.Add(doc);
        
        printSuccess('Pane successfully updated');
    },
};

_loadData = macro(@{
    printInfo('Loading view data');
    var vmData;

    if (navContext defined) {
        vmData = navContext |> dynView.LoadData;
    } else {
        vmData = dynView.LoadData();
    }
});
