extendXDoc = @{ 
    load System.Xml.Linq;
    using System.Linq;
    using System.Xml.Linq;

    xnCall = macro(@(target) { name |> XName.Get |> target });

    _parse = macro(@(type){
        @(element, name)
            name defined ?
                element.element(name).Value |> type.Parse :
                element.Value |> type.Parse
    });

    _l = macro(@(x) { x |> Enumerable.ToList });

    extend XElement {
        descendants: @(element, name)
            _l(name defined ? xnCall(element.Descendants) : element.Descendants()),

        descendant: @(element, name) element.descendants(name) |> Enumerable.Single,

        elements: @(element, name)
            _l(name defined ? xnCall(element.Elements) : element.Elements()),

        element: @(element, name) xnCall(element.Element),

        val: @(element, name) name defined ? element.element(name).Value : element.Value,
        dec: _parse(Decimal),
        int: _parse(Int32),
        date: _parse(DateTime),

        attr: @(element, name) xnCall(element.Attribute) != null ?
            xnCall(element.Attribute).Value :
            null,

        dynamic dispatch: @(element, action) {
            e = element;
            [ e.attr, e.element, e.descendant ] for {
                a = $_(action);

                if (a != null) {
                    ret a;
                }
            };

            ret null;
        }
    }
    
    extend XDocument {

    }

    extend list XElement {
        map: @(elements, selector) elements->selector,
    }

    p = this.{'$parent'};
    this |> keys -?(@(k)k.StartsWith('$ext'))->@() p.{$_} = this.{$_};
};