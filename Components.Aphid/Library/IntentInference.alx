var intentInference;

@{
    #'Std';
    using System;

    class of string Inference { bool Attempted, Wrote, Meant, string list OtherPossibilities, decimal Confidence };

    intentInference = {
        fixType: @(text) {
            
            var similar = AppDomain.CurrentDomain
                .GetAssemblies()
                -<(@() $_.GetTypes() -?@(t) t.Name != null && t.Name.ToString().Contains(text))
                -\@() $_.Name.ToString().Length;

            var inference = new Inference();

            if (similar #! @== 0) {
                inference.Attempted = false;

                ret inference;
            } else {
                inference.Attempted = true;
                inference.Wrote = text;
                var best = similar ^!;

                inference.Meant = '{0} from {1}' :: [
                    best.FullName.ToString(), !best.Assembly.IsDynamic ?
                        (best.Assembly.Location |> Path.GetFileName) :
                        'dynamic module'
                ];

                inference.Confidence = 1.0 / (similar-& (@(x) x.Name.ToString().Length) #!);

                ret inference;
            }
        },
    };
}();