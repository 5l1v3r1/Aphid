#'Std';
#'Meta';
#'List';
using System.Diagnostics;
using System.Linq;
using System.IO;
using System.Reflection;
cls();

head('Merging .NET Program');

[ 'AphidPortable', 'ildasm' ]->@()Process.GetProcessesByName($_)->@() { $_.Kill(); $_.WaitForExit() };

_facade = macro(@(f) {
    'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\Facades\\' + f
});


var asms = [] !?;

var flags = '/ndebug /zeroPeKind';

var getILMerge = @() Directory
    .GetFiles('.\\', 'ilmerge.exe', SearchOption.AllDirectories)
    |> Enumerable.FirstOrDefault;
    
var ilmergeExe = getILMerge();

if (ilmergeExe == null) {
    print('Loading NuGet.Core');
    
    if (load NuGet.Core == null) {
        fatal('Failed loading Nuget.Core');
    }

    using NuGet;

    print('Connecting to repository');
    var repo = PackageRepositoryFactory.Default.CreateRepository("https://packages.nuget.org/api/v2");
    var packageManager = new PackageManager(repo, '.\\');

    print('Installing package ILMerge');
    packageManager.InstallPackage('ILMerge');
    ilmergeExe = getILMerge();

    if (ilmergeExe == null) {
        fatal('Could not find ilmerge.exe');
    }

    :> 'ILMerge installed';
} else {
    :> 'ILMerge already installed';
}

var outExe = 'AphidPortable.exe';

using System.Linq;
var asmList = asms ->(@() '"{0}"' :: $_) !?;

head('Getting asm list');
print('~Cyan~Asms:~R~ {0}', asmList);

var libPaths = (asms->Path.GetDirectoryName!?->@() '/lib:"{0}"' :: $_) @join(' ');
libPaths = '';
    
var systemPath = 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6';

File.WriteAllText('c:\\temp\\log.txt', '');

var args =
    '/out:{0} Aphid.exe /target:{1} {2} /targetplatform:v4.5,"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6" Components.Aphid.dll {3} {4} /log:c:\\temp\\log.txt' :: [
        outExe,
        Path.GetExtension(outExe).Substring(1),
        libPaths,
        flags,
        asms
            ->(@() $_.Contains('\\') ? $_ : Path.Combine(systemPath, $_))
            ->(@() '"{0}"' :: $_)
            @join(' ')
    ];

args @print('Starting ilmerge.exe with args ~Magenta~{0}~R~');

var si = new ProcessStartInfo(ilmergeExe, args);   
si.UseShellExecute = false;
var p = Process.Start(si);
p.WaitForExit();



var failure = 
    'c:\\temp\\log.txt'
    |> File.ReadAllText
    @()
        $_.Contains('was not merged in correctly. It is still listed as an external reference in the target assembly') ||
        $_.Contains('Duplicate assembly name ') ||
        $_.Contains('ILMerge.Merge: ERROR');

if (failure) {
    print('~Red~Failed merging dll~R~');
    'c:\\temp\\log.txt' |> File.ReadAllText |> Console.WriteLine;
    exit(1);
}

//Process.Start('ildasm', 'AphidPortable.exe');
Process.Start('c:\\temp\\log.txt');

new FileInfo('AphidPortable.exe') @.Length @print('Asm size: ~Cyan~{0:n0}~R~');


Process.Start('AphidPortable.exe');

// head('Starting ngen');

// si.FileName = 'ngen';
// si.Arguments = 'install AphidPortable.exe';
// p = Process.Start(si);
// p.WaitForExit();