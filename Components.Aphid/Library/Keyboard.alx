var keyboard;

using System.Windows.Input;

@{
    #'std';

    load WindowsBase;
    using Components.PInvoke;
    using System;
    using System.Threading;
    

    keyboard = {
        type: @(buffer) buffer.ToCharArray() |> parseKeyBuffer -> pressChar,
        
        pressChar: @(ci) {
            if (ci.shift) {
                shiftDown();
                pressKey(ci.key);
                shiftUp();
            } else {
                pressKey(ci.key);
            }
        },

        shiftDown: @() keyDown(Key.LeftShift),
        shiftUp: @() keyUp(Key.LeftShift),

        keyDown: @(key){
            User32.keybd_event(
                key |> KeyInterop.VirtualKeyFromKey |> Convert.ToByte,
                0 |> Convert.ToByte,
                0 |> Convert.ToInt32,
                0 |> Convert.ToInt32);
            __impl.sleep();
        },

        keyUp: @(key){
            User32.keybd_event(
                key |> KeyInterop.VirtualKeyFromKey |> Convert.ToByte,
                0 |> Convert.ToByte,
                User32.KEYEVENTF_KEYUP,
                0 |> Convert.ToInt32);
            __impl.sleep();
        },
        
        pressKey: @(key) [ keyDown, keyUp ]->@() $_ <| key,
        keystrokeMinMs: 10,
        keystrokeMaxMs: 35,

        __impl: {
            kbd = KeyboardController,
            rnd: new Random(),
            nextMs: @{
                lock rnd
                    ret rnd.Next(keystrokeMinMs, keystrokeMaxMs + 1);
            },
            sleep: nextMs @> Thread.Sleep,
        },
    };


    var conv = new KeyConverter();
    var parseKeyBuffer = @(buffer) buffer->parseKey;

    _k = macro(@(n) { Key.n });
    _l = macro(@(lhs, rhs) { _sk(lhs, rhs, false) });
    _u = macro(@(lhs, rhs) { _sk(lhs, rhs, true) });

    _sk = macro(@(lhs, rhs, value) {
        if (c == lhs) ret {
            shift: value,
            key: rhs |> conv.ConvertFromString
        }
    });

    var parseKey = @(c) {
        _u('!', '1');
        _u('@', '2');
        _u('#', '3');
        _u('$', '4');
        _u('%', '5');
        _u('^', '6');
        _u('&', '7');
        _u('*', '8');
        _u('(', '9');
        _u(')', '0');
        _u('_', _k(OemMinus));
        _l('=', _k(OemPlus));
        _u('{', _k(OemOpenBrackets));
        _u('}', _k(OemCloseBrackets));
        _u('|', _k(OemPipe));
        _u(':', _k(OemSemicolon));
        _u('"', _k(OemQuotes));
        _u('<', _k(OemComma));
        _u('>', _k(OemPeriod));
        _u('?', _k(OemQuestion));
        _u('~', _k(OemTilde));
        ret {
            shift: c |> Char.IsUpper,
            key: $(c)
            '+': _k(Add),
            '.': _k(Decimal),
            '/': _k(Divide),
            '*': _k(Multiply),
            '\\': _k(OemBackslash),
            ']': _k(OemCloseBrackets),
            ';': _k(OemSemicolon),
            '\'': _k(OemQuotes),
            ',': _k(OemComma),
            '-': _k(OemMinus),
            '[': _k(OemOpenBrackets),
            '.': _k(OemPeriod),
            '|': _k(OemPipe),
            '+': _k(OemPlus),
            '/': _k(OemQuestion),
            '\n': _k(Enter),
            ' ': _k(Space),
            '\t': _k(Tab),
            '`': _k(OemTilde),
            $_ |> conv.ConvertFromString
        }
    };
}();

//1..5->@()keyboard.type('!@#$%^&*()_+');
//1..5->@()keyboard.type('-={}|[]\\');
//1..5->@()keyboard.type(':<>');
//1..5->@()keyboard.type(';,-[.|+?');
//1..5->@()keyboard.type(':";\'');
// 1..5->@()keyboard.type('`~`~');
1..5->@()keyboard.type('\'"');


