// Todo;
// *Add locals support to AphidUI.
//  -Base on templating from watch controls.
//  -Implement using Aphid and possibly Xaml.
//  -Extract hierarchical type traversal implementation in VSC debugger 
//   and use for tree view locals/watch/stack frames.
//  -Add stack frame browser.
//  -Add breakpoint support.
//   *Support breakpoint placement using tree control as well as click
//    to highlight.
//   *Support breakpoints on any expression type.
// *Add instruction tracing support.
// *Add reverse execution support.
// *Add ability to edit code at runtime.
//  -Support different workflows for different levels of granularity:
//   * Raw String, Tokens, Expressions, Blocks, Scripts
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;

var wpf;
var bind;

@{
    #'Std';
    load PresentationFramework;
    load PresentationCore;
    load System.xaml;
    load WindowsBase;

    using System;
    using System.Threading;
    
    wpf = {
        createApp: @(init)
            ($args.Count > 0 ? createAppAsync(init) : createAppAsync())
            .waitForExit(),

        createAppAsync: @(init){
            printInfo('Creating WPF window');

            var wpfApp = {};
            var dataGrid;

            printInfo('Creating reset event');
            var uiInitReset = new ManualResetEvent(false);

            try {
                wpfApp.uiThread = new Thread(@{
                    wpfApp.app = new Application();
                    wpfApp.window = new Window();
                    
                    wpfApp.invoke = @(func) {
                        var result;
                        printInfo('Invoking WPF with {0}', func);
                        
                        wpfApp.window.Dispatcher.Invoke(@{
                            result = func();
                            printInfo('Invoke result: {0}', result);
                        });

                        ret result;
                    };

                    wpfApp.shutdown = @() wpfApp.invoke(wpfApp.app.Shutdown);
                    wpfApp.createDataGrid = @() wpf.createDataGrid(wpfApp);

                    uiInitReset.Set();
                    wpfApp.app.Run(wpfApp.window);
                    wpfApp.app.Shutdown();
                });

                printInfo('Creating thread');
                wpfApp.uiThread.SetApartmentState(ApartmentState.STA);
                
                wpfApp.waitForExit = @{
                    wpfApp.uiThread.Join();

                    ret wpfApp;
                };

                wpfApp.uiThread.Start();

                printQuery('Waiting for WPF to initialize');
                uiInitReset.WaitOne();

                if ($args.Count > 0) {
                    wpfApp.invoke(@() init(wpfApp));
                }

                printSuccess('Initialization complete');

                ret wpfApp;
            } finally {
                uiInitReset.Dispose();
            }
            
        },

        createAppFromXaml: @(xaml, init)
            ($args.Count > 1 ? createAppFromXamlAsync(xaml, init) : createAppFromXamlAsync(xaml))
            .waitForExit(),

        createAppFromXamlAsync: @(xaml, init){
            var fn = $args.Count > 1 ? init : @{};

            ret createAppAsync(@{
                $_.window.Content = xaml |> XamlReader.Parse;
                fn($_);
            });
        },

        createDataGrid: @(app) {
            printInfo('Creating datagrid');
            ret app.invoke(@() new DataGrid());
        },

        dataGrid: {
            addTextColumn: @(dataGrid, name, binding)
                dataGrid.Dispatcher.Invoke(@{
                    var col = new DataGridTextColumn();
                    col.Header = name;
                    col.Binding = new Binding(binding);
                    col.Binding.Mode = BindingMode.TwoWay;
                    dataGrid.Columns.Add(col);
                })
        }
    };

    bind = {
        toViewModel: @(viewModelType, context)
            (context.GetType() != AphidObject ?
                typeToViewModel :
                objToViewModel)(
                    viewModelType,
                    context),

        typeToViewModel: @(viewModelType, context) {
            var ctxType = context.GetType();
            var vm = new viewModelType();
            viewModelType
                .GetProperties()
                -?(@() $_.Name != 'ViewModelDataSource')
                ->@{
                    var p = $_;
                    var name = p.Name;
                    var contextProp = ctxType.GetProperty(name);

                    if (contextProp != null) {
                        var contextPropValue = contextProp.GetValue(context);
                        p.SetValue(vm, contextPropValue);
                        vm.add_PropertyChanged(@(o, e) {
                            if (e.PropertyName == name) {
                                // print('Property ~Cyan~{0}~R~', e.PropertyName);
                                contextProp.SetValue(context, p.GetValue(vm));
                            }
                        });
                    }
                };


            print(vm);
            vm.ViewModelDataSource = context;

            ret vm;
        },

        objToViewModel: @(viewModelType, context) {
            var vm = new viewModelType();
            viewModelType
                .GetProperties()
                -?(@() $_.Name != 'ViewModelDataSource')
                ->@{
                    var p = $_;
                    var name = p.Name;
                    
                    if (context[name] defined) {
                        p.SetValue(vm, context[name]);

                        vm.add_PropertyChanged(@(o, e) {
                            if (e.PropertyName == name) {
                                print('Property ~Cyan~{0}~R~', e.PropertyName);
                                context[name] = p.GetValue(vm);
                            }
                        });
                    }
                };


            print(vm);
            vm.ViewModelDataSource = context;

            ret vm;
        },
    };
}();