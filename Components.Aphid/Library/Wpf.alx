using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;

var wpf;

@{
    #'Std';
    load PresentationFramework;
    load PresentationCore;
    load System.xaml;
    load WindowsBase;

    using System;
    using System.Threading;
    
    wpf = {
        createApp: @(init)
            ($args.Count > 0 ? createAppAsync(init) : createAppAsync())
            .waitForExit(),

        createAppAsync: @(init){
            printInfo('Creating WPF window');

            var wpfApp = {};
            var dataGrid;

            printInfo('Creating reset event');
            var uiInitReset = new ManualResetEvent(false);

            try {
                wpfApp.uiThread = new Thread(@{
                    wpfApp.app = new Application();
                    wpfApp.window = new Window();
                    
                    wpfApp.invoke = @(func) {
                        var result;
                        printInfo('Invoking WPF with {0}', func);
                        
                        wpfApp.window.Dispatcher.Invoke(@{
                            result = func();
                            printInfo('Invoke result: {0}', result);
                        });

                        ret result;
                    };

                    wpfApp.shutdown = @() wpfApp.invoke(wpfApp.app.Shutdown);
                    wpfApp.createDataGrid = @() wpf.createDataGrid(wpfApp);

                    uiInitReset.Set();
                    wpfApp.app.Run(wpfApp.window);
                    wpfApp.app.Shutdown();
                });

                printInfo('Creating thread');
                wpfApp.uiThread.SetApartmentState(ApartmentState.STA);
                
                wpfApp.waitForExit = @{
                    wpfApp.uiThread.Join();

                    ret wpfApp;
                };

                wpfApp.uiThread.Start();

                printQuery('Waiting for WPF to initialize');
                uiInitReset.WaitOne();

                if ($args.Count > 0) {
                    wpfApp.invoke(@() init(wpfApp));
                }

                printSuccess('Initialization complete');

                ret wpfApp;
            } finally {
                uiInitReset.Dispose();
            }
            
        },

        createAppFromXaml: @(xaml, init)
            ($args.Count > 1 ? createAppFromXamlAsync(xaml, init) : createAppFromXamlAsync(xaml))
            .waitForExit(),

        createAppFromXamlAsync: @(xaml, init){
            var fn = $args.Count > 1 ? init : @{};

            ret createAppAsync(@{
                $_.window.Content = xaml |> XamlReader.Parse;
                fn($_);
            });
        },

        createDataGrid: @(app) {
            printInfo('Creating datagrid');
            ret app.invoke(@() new DataGrid());
        },

        dataGrid: {
            addTextColumn: @(dataGrid, name, binding)
                dataGrid.Dispatcher.Invoke(@{
                    var col = new DataGridTextColumn();
                    col.Header = name;
                    col.Binding = new Binding(binding);
                    col.Binding.Mode = BindingMode.TwoWay;
                    dataGrid.Columns.Add(col);
                })
        }
    };
}();