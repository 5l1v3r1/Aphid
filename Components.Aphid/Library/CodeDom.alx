#'CodeDom.g';

using Components.Aphid.Interpreter;
using Components.Aphid.TypeSystem;

_attr = macro(@(a){
    @(t) {
        t.UserData.set_Item(
            'AttributesAspect',
            MemberAttributes.a | MemberAttributes.Final);
            
        ret t;
    }
});

extend CodeTypeDeclaration {
    partial: @(t) {
        t.IsPartial = true;

        ret t;
    },

    withPrivate: _attr(Private),
    withProtected: _attr(Protected),
    withPublic: _attr(Public),

    method: @(t, return, name) {
        var m = code.memberMethod();

        if (t.UserData.Contains('AttributesAspect')) {
            m.Attributes = t.UserData.get_Item('AttributesAspect');
        }

        m.UserData.Add('DeclaringType', t);
        m.ReturnType = code.type(return);
        m.Name = name;
        t.Members.Add(m);

        ret m;
    },
}

extend CodeMemberMethod {
    param: @(m, type, name) {
        code.paramDecl(type |> code.type, name)
        |> m.Parameters.Add;

        ret m;
    },

    stmt: @(m, stmt) {
        m.Statements.Add(stmt);

        ret m;
    },
}

code.partial = @{ $_.IsPartial = true; ret $_ };