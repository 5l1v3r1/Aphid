#'std';
#'meta';
var argList = getCommandLineArgs() |> Enumerable.ToList;
cls();
using Components;
using Components.External;
using System;
using System.Diagnostics;
using System.Runtime.Remoting;
using System.Runtime.Remoting.Channels;
using System.Runtime.Remoting.Channels.Ipc;
using System.Runtime.Remoting.Messaging;
using System.Security.Permissions;
using System.Threading;
load System.Runtime.Remoting;
load mscorlib;

head('IPC Channel Test');



if (!argList.Contains('-client')) {
    var aphid = this.{'$aphid'};
    
    
    printInfo('Starting IPC Channel');
    var serverChannel = new IpcChannel("localhost:9090");
    ChannelServices.RegisterChannel(serverChannel);
    printSuccess('Channel name: {0}', serverChannel.ChannelName);
    printSuccess('Channel priority: {0}', serverChannel.ChannelPriority);

    var channelData = serverChannel.ChannelData;
    channelData.ChannelUris->@format('The channel URI is {0}');

    RemotingConfiguration.RegisterWellKnownServiceType(
        aphid.GetIpcContextType(),
        "RemoteObject.rem", 
        WellKnownObjectMode.Singleton);

    urls = serverChannel.GetUrlsForUri("RemoteObject.rem");
    print(urls);

    aphid.RegisterIpcServer();

    var args = format(
        '/c {0} {1} -client',
        getExe(),
        getCommandLineArgs()[1]);

    printQuery('Starting client process with args ~Cyan~{0}~R~', args);
    var proc = Process.Start('cmd', args);
    printInfo('Waiting for process to exit');
    proc.WaitForExit();
    printSuccess('Process has exited');
    Console.ReadLine();


} else {
    try {
        var aphid = this.{'$aphid'};
        printInfo('Starting IPC client');
        var clientChannel = new IpcChannel();

        printInfo('Registering channel');
        ChannelServices.RegisterChannel(clientChannel);

        printInfo('Registering remote type');

        var remoteType = new WellKnownClientTypeEntry(
            aphid.GetIpcContextType(),
            "ipc://localhost:9090/RemoteObject.rem");
    
        RemotingConfiguration.RegisterWellKnownClientType(remoteType);

        remoteType |> print;

        var messageSink = clientChannel.CreateMessageSink(
            "ipc://localhost:9090/RemoteObject.rem",
            null,
            null);

        messageSink |> print;

        var ipcContext = aphid.CreateIpcClientContext();
        ipcContext.Eval('print("Hello world")');

        //var ro = Activator.CreateInstance(roType);
        //ro |> print;
        //var ro = new RemoteObject();
        //ro |> print;

    
        Thread.Sleep(1500);
    } catch (e) {
        dump(e);
    } finally {
        repl();
    }
    
    Console.ReadLine();
}