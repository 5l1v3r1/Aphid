using Components;
using Components.External;
using System;
using System.Diagnostics;
using System.Runtime.Remoting;
using System.Runtime.Remoting.Channels;
using System.Runtime.Remoting.Channels.Ipc;
using System.Runtime.Remoting.Messaging;
using System.Security.Permissions;
using System.Threading;
load System.Runtime.Remoting;
load mscorlib;

_initTrace = macro(@{
    var trace = ipc.trace ? print : @{ };
    var traceInfo = ipc.trace ? printInfo : @{ };
    var traceSuccess = ipc.trace ? printSuccess : @{ };
    var traceQuery = ipc.trace ? printQuery : @{ };
});

var ipc = {
    trace: true,
    listen: @(uri) {
        _initTrace();
        var u = $args.Count > 0 ? uri : "localhost:9090";
        traceInfo('Starting IPC Channel on {0}', u);
        
        var serverChannel = new IpcChannel(u);
        ChannelServices.RegisterChannel(serverChannel);
        traceSuccess('Channel name: {0}', serverChannel.ChannelName);
        traceSuccess('Channel priority: {0}', serverChannel.ChannelPriority);

        var channelData = serverChannel.ChannelData;
        channelData.ChannelUris->@format('The channel URI is {0}');
        var aphid = this.{'$aphid'};

        RemotingConfiguration.RegisterWellKnownServiceType(
            aphid.GetIpcContextType(),
            "RemoteObject.rem", 
            WellKnownObjectMode.Singleton);

        urls = serverChannel.GetUrlsForUri("RemoteObject.rem");
        trace(urls);
        aphid.RegisterIpcServer();
    },
    
    // Todo: add host, port, and obj args
    connect: @() {
        _initTrace();
        traceInfo('Starting IPC client');
        var clientChannel = new IpcChannel();
        traceInfo('Registering channel');
        ChannelServices.RegisterChannel(clientChannel);
        traceInfo('Registering remote type');
        var aphid = this.{'$aphid'};

        var remoteType = new WellKnownClientTypeEntry(
            aphid.GetIpcContextType(),
            "ipc://localhost:9090/RemoteObject.rem");
    
        RemotingConfiguration.RegisterWellKnownClientType(remoteType);
        remoteType |> trace;

        var messageSink = clientChannel.CreateMessageSink(
            "ipc://localhost:9090/RemoteObject.rem",
            null,
            null);

        messageSink |> trace;
        var ipcContext = aphid.CreateIpcClientContext();

        ret ipcContext;
    },
};


ipc.test = @{
    var argList = getCommandLineArgs() |> Enumerable.ToList;
    head('IPC Channel Test');

    if (!argList.Contains('-client')) {
        _initTrace();

        ipc.listen();

        var exe = 'c:\\source\\aphid\\aphid\\bin\\debug\\Aphid.exe';
        var script = 'C:\\source\\aphid\\Components.Aphid\\Library\\Ipc.alx';

        var args = format(
            '/c {0} {1} -client',
            exe,
            script);
            //getExe(),
            //getCommandLineArgs()[1]);

        traceQuery('Starting client process with args ~Cyan~{0}~R~', args);
        var proc = Process.Start('cmd', args);
        traceInfo('Waiting for process to exit');
        proc.WaitForExit();
        traceSuccess('Process has exited');
        // Console.ReadLine();


    } else {
        try {
            var ctx = ipc.connect();
            ctx.Eval('trace("Hello world")');
            Thread.Sleep(1500);
        } catch (e) {
            dump(e);
        } finally {
            repl();
        }
        
        // Console.ReadLine();
    }
};