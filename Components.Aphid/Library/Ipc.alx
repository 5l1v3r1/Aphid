#'std';
argList = getCommandLineArgs() |> Enumerable.ToList;
cls();
using Components;
using Components.External;
using System;
using System.Diagnostics;
using System.Runtime.Remoting;
using System.Runtime.Remoting.Channels;
using System.Runtime.Remoting.Channels.Ipc;
using System.Runtime.Remoting.Messaging;
using System.Security.Permissions;
using System.Threading;
load System.Runtime.Remoting;
load mscorlib;

head('IPC Channel Test');

if (!argList.Contains('-client')) {
    var asmBuilder = this.{'$asm'};
    
    asmBuilder.SetAssemblyFile(
        'AphidIpc',
        'AphidIpc.dll',
        PathHelper.GetEntryDirectory());

    var roType = class MarshalByRefObject RemoteObject {
        int callCount,
    };

    var saveIpcAsm = @{
        var remoteDllPath = 'AphidIpc.dll';// |> PathHelper.GetExecutingPath;
        print('Saving IPC dll as ~Cyan~{0}~R~', remoteDllPath);
        remoteDllPath |> asmBuilder.Assembly.Save;
    };

    var getIpcAsm = @{
        var domain = AppDomain.CurrentDomain;
        var asms = domain.GetAssemblies();
        
        var aphidModule = asms
            -?(@()$_.ToString().Contains('AphidIpc'))
            |> Enumerable.FirstOrDefault;

        if (aphidModule == null) {
            printError(
                'Could not find IPC modules. Found the following ' + 
                'modules loaded in current AppDomain:');

            asms->@print('    {0}');
            exit(0xbad);
        }

        ret aphidModule;
    };
    
    saveIpcAsm();
    var ipcAsm = getIpcAsm();

    printInfo('Starting IPC Channel');
    var serverChannel=new IpcChannel("localhost:9090");
    ChannelServices.RegisterChannel(serverChannel);
    printSuccess('Channel name: {0}', serverChannel.ChannelName);
    printSuccess('Channel priority: {0}', serverChannel.ChannelPriority);

    var channelData = serverChannel.ChannelData;
    channelData.ChannelUris->@format('The channel URI is {0}');


    if (roType == null) {
        printError('Could not find type RemoteObject.');
        exit();
    }

    RemotingConfiguration.RegisterWellKnownServiceType(
        roType,
        "RemoteObject.rem", 
        WellKnownObjectMode.Singleton);

    urls = serverChannel.GetUrlsForUri("RemoteObject.rem");
    print(urls);
    var domain = AppDomain.CurrentDomain;
    var asms = domain.GetAssemblies();
    //domain.dir('Mod');
    //domain.dir('Assem');
    //asms |> dump;
    
    // var aphidModule = asms
    //     -?(@()$_.ToString().Contains('AphidModule_'))
    //     |> Enumerable.FirstOrDefault;

    // if (aphidModule == null) {
    //     printError('Could not find AphidModule.');
    //     exit();
    // }

    // aphidModule |> dump;
    
    // aphidModule.dir();
    //aphidModule.Location |> print;
    //aphidModule.GetFiles() |> print;
    // repl();
    // //aphidModule.GetType() |> print;
    // //'AphidIpc.dll' |> PathHelper.GetExecutingPath |> aphidModule.Save;
    // exit();

    printQuery('Starting client process');

    var proc = Process.Start(
        'cmd',
        format('/c {0} -client', Environment.CommandLine));

    printInfo('Waiting for process to exit');
    proc.WaitForExit();

    printSuccess('Process has exited');


} else {
    try {
        printInfo('Loading IPC assembly');
        var ipcDll = 'AphidIpc.dll' |> PathHelper.GetEntryPath;
        var ipAsm = Assembly.LoadFile(ipcDll);

        if (ipAsm == null) {
            printError('Could not load IPC assembly from {0}', ipAsm);
            exit(0xbad01);
        } else {
            printSuccess('IPC assembly loaded from ~Green~{0}~R~', ipAsm.Location);
        }

        var types = ipAsm.GetTypes();
        types @print('Types: {0}');

        var roType = ipAsm.GetTypes() |> Enumerable.SingleOrDefault;

        if (roType == null) {
            print('Could not load RemoteObect type from assembly.');
            Console.ReadKey();
            exit(0xbad10);
        }

        printInfo('Starting IPC client');
        var clientChannel = new IpcChannel();

        printInfo('Registering channel');
        ChannelServices.RegisterChannel(clientChannel);

        printInfo('Registering remote type');

        var remoteType = new WellKnownClientTypeEntry(
            roType,
            "ipc://localhost:9090/RemoteObject.rem");

    
    
        RemotingConfiguration.RegisterWellKnownClientType(remoteType);

        remoteType |> print;

        var messageSink = clientChannel.CreateMessageSink(
            "ipc://localhost:9090/RemoteObject.rem",
            null,
            null);

        messageSink |> print;

        using System.Reflection;
        printInfo('Creating RemoteObject');
        var ro = new RemoteObject();

        printSuccess('Created remote object: {0}', ro);
        //var ro = Activator.CreateInstance(roType);
        //ro |> print;
        //var ro = new RemoteObject();
        //ro |> print;

    
        Thread.Sleep(1500);
    } catch (e) {
        dump(e);
    } finally {
        repl();
    }
    //Console.ReadLine();
}