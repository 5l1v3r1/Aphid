#'Std';
using System;
using System.Collections;
using System.IO;
Console.Clear();

////////////////////////////////////////////////////////////////
// uint32 | Id
//  uint8 | Enter/Eeave = 1/0
//    var | Name
// 
// _framePerformanceBinaryWriter.Write(id);
// _framePerformanceBinaryWriter.Write(true);
// _framePerformanceBinaryWriter.Write(frame.Name);


// _framePerformanceBinaryWriter.Write(id);
// _framePerformanceBinaryWriter.Write(false);
// _framePerformanceBinaryWriter.Write(tup.Item1);
// _framePerformanceBinaryWriter.Write(tup.Item2.ElapsedTicks);
// _framePerformanceBinaryWriter.Write(tup.Item2.ElapsedMilliseconds);

class of long FrameProfile {
	int ThreadId,
	string Name,
	Ticks,
	TicksExclusive,
	Milliseconds,
	MillisecondsExclusive,
	ArrayList ChildFrames,
};

var dumpFrameJson = @{
	#'Serialization';
	$_ |> toJson |> Cli.StyleEscape |> print;
};

var dumpFrame = @{
	#'Serialization';
	$_ |> toJson |> Cli.StyleEscape |> print;
};

var trace = 'C:\\source\\Aphid\\Aphid\\bin\\Debug\\AphidFramePerformance.ac063cef-bf19-4ee2-a5a3-1786653a79ed.dat';
var reader = new BinaryReader(trace |> File.OpenRead);
var profileHeader = reader.ReadString();
print(profileHeader);
// var header = r.ReadString();

// reader.dir();
// reader.BaseStream.dir();

var threadStacks = {};
var root = new ArrayList();
var parsed = 0;
var frames = [];
var frameTotals = {};

while (reader.BaseStream.Position < reader.BaseStream.Length) {
	
	var id = reader.ReadInt32();

	var stack;

	if (!(threadStacks.{id} defined)) {
		stack = new Stack();
		threadStacks.{id} = stack;
	} else {
		stack = threadStacks.{id};
	}

	var enter = reader.ReadBoolean();
	var name = reader.ReadString();

	if (enter) {
		var frame = new FrameProfile();
		frame.ThreadId = id;
		frame.Name = name;
		frame.ChildFrames = new ArrayList();
		
		if (stack.Count > 0) {
			stack.Peek().ChildFrames.Add(frame);
		} else {
			root.Add(frame);
		}

		stack.Push(frame);
		frames.add(frame);
		// frame.Name |> Cli.StyleEscape |> print;
	} else {
		var curFrame = stack.Pop();
		curFrame.Ticks = reader.ReadInt64();
		curFrame.Milliseconds = reader.ReadInt64();
		var arr = curFrame.ChildFrames.ToArray();

		if (arr.Length == 0) {
			curFrame.TicksExclusive = curFrame.Ticks;
			curFrame.MillisecondsExclusive = curFrame.Milliseconds;
		} else {
			_exclusive = macro(@(n) { curFrame.n - (arr->@.n+>@(x, y) x + y) });
			curFrame.TicksExclusive = _exclusive(Ticks);
			curFrame.MillisecondsExclusive = _exclusive(Milliseconds);
		}

		// if (frameTotals.{curFrame.Name} defined) {
		// 	var t = frameTotals.{curFrame.Name};
		// 	t.Ticks += curFrame.Ticks;
		// 	t.TicksExclusive += curFrame.TicksExclusive;
		// 	t.Milliseconds += curFrame.Milliseconds;
		// 	t.Milliseconds += curFrame.MillisecondsExclusive;
		// } else {
		// 	var t = new FrameProfile();
		// 	t.Name = curFrame.Name;
		// 	t.Ticks = curFrame.Ticks;
		// 	t.TicksExclusive = curFrame.TicksExclusive;
		// 	t.Milliseconds = curFrame.Milliseconds;
		// 	t.Milliseconds = curFrame.MillisecondsExclusive;
		// 	frameTotals.{curFrame.Name} = t;
		// }
	}

	// if (++parsed > 1009) {
	// 	break;
	// }
}

[ [ 'inclusive ticks', @.Ticks ], [ 'exclusive ticks', @.TicksExclusive ] ]->@{
	head('Top 100 slowest by ' + $_[0]);
	
	frames.orderByDescending($_[1]).take(100)->@()
		print(
			'Name: {0}, Ticks: {1:n0}, Ticks Exlusive: {2:n0}',
			$_.Name.Replace('\r', '').Replace('\n', '\\n'),
			$_.Ticks,
			$_.TicksExclusive);

	print();
};

print('Done');
reader.Dispose();