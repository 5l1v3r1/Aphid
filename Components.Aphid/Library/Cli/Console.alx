var getCommand = @() Environment.CommandLine;
var getCommandLineArgs = @() Environment.GetCommandLineArgs();

var fixColors = @{
    Console.ForegroundColor = ConsoleColor.Gray;
    Console.BackgroundColor = ConsoleColor.Black;
};

var console;
var head = @(msg){ Cli.WriteHeader($_, console.defaultHeaderStyle) };
var header = head;
var subhead = @(msg) { Cli.WriteSubheader(msg, console.defaultSubheaderStyle) };
var subheader = subhead;

_ci = macro(@(a) { if (exists()) { a } });

@{
    using Components.PInvoke;
    using Components.ConsolePlus;

    console = {
        head,
        header,
        subhead,
        subheader,
        defaultHeaderStyle: '~|Blue~~White~',
        defaultSubheaderStyle: defaultHeaderStyle,
    
        free: @{            
            Cli.UseTrace = true;
            Kernel32.FreeConsole();
        },

        getWindow: Kernel32.GetConsoleWindow,
        exists: getWindow @> @!= IntPtr.Zero,
        runWindowCmd: @User32.ShowWindow(getWindow()),
        show: @() runWindowCmd(ShowWindowCommands.SW_SHOW),
        hide: @() runWindowCmd(ShowWindowCommands.SW_HIDE),

        bindKeyAsync: @(key, action) {
            using System.Threading;

            var t = new Thread(@{
                while (true) {
                    action();

                    while (Console.ReadKey(true).Key != key) {
                    }
                }
            });

            t.IsBackground = true;
            t.Start();

            ret t;
        },

        clear: @() _ci(Console.Clear()),

        setTitle: @(title) _ci(Console.Title = title),
    };
}();

var cls = console.clear;

var stdScope = this;

if (!(stdScope.dump defined)) {
    stdScope.dump = @(o){
        (o != null ?
            !isNonNullObject(o) && toJson defined ? toJson(o) : serialize(o) :
            'null')
        |> Console.WriteLine;
    };
}

var dumpe = @{ 
    $_ |> dump;
    exit(0);
};

var exit = @() ($args.Count != 0 ? $_ : 0) |> Environment.Exit;

var fatal = @{
    var msg = 'Fatal error';
    throw $($args.Count) 0: msg, '{0}: {1}' :: [ msg, $args[0] :: ($args @aq.skip(1)) ];
};