<?xml version="1.0"?>
<ArrayOfMemberDoc xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <MemberDoc>
    <Filename>Library\Meta.alx</Filename>
    <Path>mutate</Path>
    <PathParts>
      <string>mutate</string>
    </PathParts>
    <Type>Function</Type>
    <Summary>Takes an abstract syntax tree and performs transformations on it.</Summary>
    <Parameters>
      <MethodParamDoc>
        <Name>mutateNode</Name>
        <Description>The function to be applied to each node as the tree is walked.</Description>
      </MethodParamDoc>
      <MethodParamDoc>
        <Name>rootNode</Name>
        <Description>The root at which the transformation begins. Can be a single node or a list of nodes.</Description>
      </MethodParamDoc>
    </Parameters>
    <Returns>A transformed copy of an abstract syntax tree.</Returns>
    <Example>var f = @() print(foo\bar\test.txt);

var block = f.Body @mutate(@{
    if ('\\' |&gt; getToken |&gt; expression.isOp) {
        hasChanged = true;
        ret expression
            .ToString()
            .Replace('\\', '\\\\')
            @format('"{0}"')
            |&gt; ast.str;
    }
});

block |&gt; evalAst;</Example>
  </MemberDoc>
  <MemberDoc>
    <Filename>Library\Meta.alx</Filename>
    <Path>frames</Path>
    <PathParts>
      <string>frames</string>
    </PathParts>
    <Type>Function</Type>
    <Summary>Retrieves the frames currently on the call stack, including the current call.</Summary>
    <Parameters />
    <Returns>A collection of AphidFrames representative of the current call stack.</Returns>
    <Example>#'std';
#'meta';
frames() |&gt; dump;</Example>
  </MemberDoc>
  <MemberDoc>
    <Filename>Library\Meta.alx</Filename>
    <Path>frame</Path>
    <PathParts>
      <string>frame</string>
    </PathParts>
    <Type>Function</Type>
    <Summary>Retrieves the frame currently on the call stack at the specified index, with the current call. at zero</Summary>
    <Parameters>
      <MethodParamDoc>
        <Name>index</Name>
        <Description>The index of the frame to be retrieved.</Description>
      </MethodParamDoc>
    </Parameters>
    <Returns>An AphidFrames representative of a call on the stack.</Returns>
    <Example>#'std';
#'meta';
frame(1) |&gt; dump;</Example>
  </MemberDoc>
  <MemberDoc>
    <Filename>Library\Meta.alx</Filename>
    <Path>tokenize</Path>
    <PathParts>
      <string>tokenize</string>
    </PathParts>
    <Type>Function</Type>
    <Summary>Tokenizes text using the Aphid lexical analyzer.</Summary>
    <Parameters>
      <MethodParamDoc>
        <Name>text</Name>
        <Description>The text to be passed to the Aphid lexer.</Description>
      </MethodParamDoc>
    </Parameters>
    <Returns>An array of AphidTokens.</Returns>
    <Example>#'std';
#'meta';
'var x = 10; x *= 2;' |&gt; tokenize |&gt; print;</Example>
  </MemberDoc>
  <MemberDoc>
    <Filename>Library\Meta.alx</Filename>
    <Path>ast.op</Path>
    <PathParts>
      <string>ast</string>
      <string>op</string>
    </PathParts>
    <Type>Property</Type>
    <Summary>Gets the operator for the specified abstract syntax tree node.</Summary>
    <Parameters />
    <Returns>The operator of the node.</Returns>
    <Example>// Todo</Example>
  </MemberDoc>
  <MemberDoc>
    <Filename>Library\MetaTest.alx</Filename>
    <Path>mutate</Path>
    <PathParts>
      <string>mutate</string>
    </PathParts>
    <Type>Function</Type>
    <Summary>Takes an abstract syntax tree and performs transformations on it.</Summary>
    <Parameters>
      <MethodParamDoc>
        <Name>mutateNode</Name>
        <Description>The function to be applied to each node as the tree is walked.</Description>
      </MethodParamDoc>
      <MethodParamDoc>
        <Name>rootNode</Name>
        <Description>The root at which the transformation begins. Can be a single node or a list of nodes.</Description>
      </MethodParamDoc>
    </Parameters>
    <Returns>A transformed copy of an abstract syntax tree.</Returns>
    <Example>var f = @() print(foo\bar\test.txt);

var block = f.Body @mutate(@{
    if ('\\' |&gt; getToken |&gt; expression.isOp) {
        hasChanged = true;
        ret expression
            .ToString()
            .Replace('\\', '\\\\')
            @format('"{0}"')
            |&gt; ast.str;
    }
});

block |&gt; evalAst;</Example>
  </MemberDoc>
</ArrayOfMemberDoc>