#'DebugDeploy';
#'Std';
#'StringEmitter';
using Components.Aphid.Lexer;
using Components.Aphid.Parser;

var e = strEmitter;
e.inNamespace = false;
e.inClass = false;

e.classAspects = {
    public: true,
    partial: true,
};

e.propertyAspects = {
    public: true,
    silent: false,
};

e.boolConverter = {};
e.boolConverterNames = [];
e.lastPropertyName = null;
e.lastOnChangeName = null;
e.onChangeMap = [];
e.onChangeStatements = [];

e.emitUnaryOperatorExpression = @(exp) {
    if (exp.Operator == AphidTokenType.usingKeyword){
        append(margin());
        append('using ');
        emitExpression(exp.Operand, false);
        append(';\r\n');
    }
};

e.emitBinaryOperatorExpression = @(exp, isStatement) {
    if (isStatement) {
        if (exp.Operator != AphidTokenType.MemberOperator)
            fatal('Invalid op: {0}', exp.Operator);

        var parts = exp.GetChildren();
        var badParts = parts-?(@() $_.Type != AphidExpressionType.IdentifierExpression);
    
        if ((badParts #!) != 0) {
            fatal('Invalid namespace decl: {0}', exp);
        }

        parts->@.Identifier+>@(x, y) x + '.' + y |> beginNamespace;
    } else {
        //append("(");
        emitExpression(exp.LeftOperand, false);
        exp.Operator |> opStr.binary.get |> append;
        emitExpression(exp.RightOperand, false);
        //append(")");
    }
};

e.emitTernaryOperatorExpression = @(exp, isStatement) {
    if (exp.Operator != AphidTokenType.ConditionalOperator ||
        exp.FirstOperand.Type != AphidExpressionType.IdentifierExpression)
        fatal('Invalid exp: {0}', exp);

    //exp |> dumpProps;     
    var n = exp.FirstOperand.Identifier.ToString();
    boolConverterNames.add(n);
    boolConverter.{n} = [ exp.SecondOperand, exp.ThirdOperand ];

    { boolConverterNames, boolConverter }
    |> serialize
    @print('[+] Bool converters updated: {0}');

    //boolConverter.{exp.FirstOperand.Identifier}->emitExpression;
    //text |> print;

    //boolConverter |> serialize |> print;
    //print(0);
    //exit(0);
};

e.beginStatement = @(object, isStatement) {
    //print('Beginning stmt');
    //print(inNamespace);
    //print(inClass);
};

e.beginNamespace = @(ns) {
    if (inNamespace) {
        endNamespace();
        append('\r\n');
    }

    append('namespace {0}\r\n{{\r\n', ns);
    indent();
    inNamespace = true;
};

e.endNamespace = @{
    unindent();
    append('}\r\n');
    inNamespace = false;
};

e.beginClass = @(object) {
    lastPropertyName = null;
    lastOnChangeName = null;
    onChangeMap = [];
    onChangeStatements = [];

    inClass = true;
    append(margin());

    if (classAspects.public) append('public ');
    if (classAspects.partial) append('partial ');

    append('class {0}\r\n', object.Identifier.Identifier);
    append(margin());
    append('{\r\n');
    indent();
};

e.emitObjectExpression = @(object, isStatement) {
    beginClass(object, isStatement);
    object.Pairs->emitProperty;
    
    onChangeMap->@(m){
        appendLine('private void ' + m.func + '()');
        appendLine('{');
        indent();
        
        onChangeStatements-?(@(s) s.func == m.func)->@(s){
            var c = boolConverter.{s.converter};
            append(margin());
            append('{0} = {1} ? ', s.dst, s.condition);
            emitExpression(c[0], false);
            append(' : ');
            emitExpression(c[1], false);
            append(';\r\n');
        };
        unindent();
        appendLine('}');
        appendLine('');
    };

    endClass(object, isStatement);
};

e.endClass = @{
    unindent();
    append('{0}}}\r\n', margin());
    inClass = false;
};

e.emitProperty = @(p) {
    var lhs = p.LeftOperand;
    var a = lhs.Attributes;

    if (a.Count == 1) {
        a[0] @print('[?] Checking for bool converter "{0}"');

        if (boolConverterNames.contains(a[0].Identifier)) {
            a[0] @print('[+] Bool converter found with name "{0}"');
            
            onChangeStatements.add({
                func: lastOnChangeName,
                dst: lhs.Identifier,
                condition: lastPropertyName,
                converter: a[0].Identifier,
            });

            ret null;
        
        }
    }

    var attrs = lhs |> parseAttributes;
    var name = lhs.Identifier;
    var field = '_' + name;

    append(margin());
    append('private ');
    append(attrs.type + ' ');
    append(field);

    if (p.RightOperand.Type != AphidExpressionType.IdentifierExpression) {
        append(' = ');
        emitExpression(p.RightOperand);
    }

    append(';\r\n\r\n');

    append(margin());
    append(attrs.access + ' ');
    append(attrs.type + ' ');
    append(name);

    append('\r\n');
    appendLine('{');
    indent();

    appendLine('get');
    appendLine('{');
    indent();
    appendLine('return ' + field + ';');
    unindent();
    appendLine('}');
    
    appendLine('set');
    appendLine('{');
    indent();
    appendLine(field + ' = value;');
    var onChangeName = 'On' + name + 'Changed';
    onChangeMap.add({ prop: name, func: onChangeName });
    appendLine(onChangeName + '();');
    //appendLine('');
    
    if (!e.propertyAspects.silent && !attrs.silent) {
        appendLine('InvokePropertyChanged("' + name + '");');
    }

    unindent();
    appendLine('}');
    unindent();
    appendLine('}\r\n');

    lastPropertyName = name;
    lastOnChangeName = onChangeName;
    //print('[i] Last func: {0}', lastOnChangeName);
};

e.emitEnd = @{
    if (inClass) endClass();
    if (inNamespace) endNamespace();
};

var getLexer = @(stream) {
    var l = {
        index: -1,
        token: null,
        count: stream.Count,
        eos: false,
        stream,

        oneOrNone: @(set, def) {
            for (x in set) {
                print('[?] Checking for {0}', x);
                if (x |> match) {
                    ret $_;
                }
            }

            ret def;
        },

        match: @(t) {
            if (token == t) {
                //print('[+] token matched');
                next();
                ret true;
            } else {
                //print('[-] token not matched');
                ret false;
            }
        },
        
        take: @() {
            var t = token;
            if (!eos) next();

            ret t;
        },

        next: @{
            if (index < count) index++;

            if (index != count) {
                token = stream[index];
                //print('[+] Next token: {0}', token);
            } else {
                token = null;
                eos = true;
            }

            ret token;
        }
    };

    l.next();

    ret l;
};

var lastAttrTree = null;

var parseAttributes = @(exp) {
    if (exp.Attributes.Count == 0)
        ret lastAttrTree;

    //print('='*40);
    //print('= Attributes');
    //print('='*40);

    var lexer = exp.Attributes->@.Identifier |> getLexer;
    
    var attrTree = {
        access = lexer.oneOrNone(['private', 'public'], 'public'),
        type = lexer.take(),
        silent = lexer.match('silent'),
        success = lexer.eos,
    };

    lastAttrTree = attrTree;

    //attrTree |> serialize |> print;

    ret attrTree;
};


#'AphidUI';

print();
//e.text |> print;

using System.IO;
e.text.ToString() @File.WriteAllText('C:\\source\\Aphid\\AphidUI\\ViewModels\\ViewModels.g.cs');

//e.emitObjectExpression();