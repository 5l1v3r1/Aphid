#'Std';
#'Compiler';
using Components.Aphid.UI;

// Used to ignore scripts copied to bin directory by build process. To
// disable, comment line out.
var ignorePattern = '\\bin\\';

var cliArgs = Environment.GetCommandLineArgs();

if (cliArgs.Length != 5) {
    print('aphid AphidExportStubCompiler.alx [namespace] [project dir] [output dir]');
    exit(1);
}

var namespace = cliArgs[2];
var projectDir = cliArgs[3];
var outputDir = cliArgs[4];

printInfo('Generating classes in namespace ~Cyan~{0}~R~', namespace);

if (!Directory.Exists(projectDir)) {
    printError('Could not find project directory ~Yellow~{0}~R~', projectDir);
    exit(0xbad01);
}

if (!Directory.Exists(outputDir)) {
    printInfo('Creating output directory ~Cyan~{0}~R~', outputDir);
    Directory.CreateDirectory(outputDir);
}

printQuery('Searching project directory for scripts');
var srcFiles = Directory.GetFiles(projectDir, '*.alx', SearchOption.AllDirectories)
    -?@() !(ignorePattern defined) || !$_.ToLower().Contains(ignorePattern);

if ((srcFiles #!) == 0) {
    printError('No scripts found');
    exit(0xbad02);
}

printSuccess('Found ~Green~{0}~R~ script(s)', srcFiles #!);

srcFiles->@(srcFile) {
	var cs = exports.compileFile(srcFile);

	if (cs == null) {
		ret null;
	}

    var dstFile =
        Path.ChangeExtension(srcFile, 'cs')
        |> Path.GetFileName
        @Path.Combine(outputDir);

    printInfo('Writing compiled class to ~Green~{0}~R~', dstFile);
    cs @File.WriteAllText(dstFile);
};

printSuccess('Done');