#'Std';
#'Meta\\Code\\Compiler';
using Components.Aphid.UI;

// Used to ignore scripts copied to bin directory by build process. To
// disable, comment line out.
var ignorePattern = '\\bin\\';

var args = parseArgsFor([
    'aphidexportstubcompiler.exe',
    'aphidexportstubcompiler.alx',
    'aphidexportstubcompiler'
]);

if (args.Count == 0) {
    print('aphid AphidExportStubCompiler.alx [namespace] [project dir] [output dir]');
    exit(1);
} else if (args.Count != 3) {
    printError('Invalid args: {0}', Environment.CommandLine);
    exit(0xbad01);
}

var ns = args[0].Value;
var projectDir = args[1].Value;
var outputDir = args[2].Value;

printInfo('Generating classes in namespace ~Cyan~{0}~R~', ns);

if (!Directory.Exists(projectDir)) {
    printError('Could not find project directory ~Yellow~{0}~R~', projectDir);
    exit(0xbad01);
}

if (!Directory.Exists(outputDir)) {
    printInfo('Creating output directory ~Cyan~{0}~R~', outputDir);
    Directory.CreateDirectory(outputDir);
}

printQuery('Searching project directory for scripts');
var srcFiles = Directory.GetFiles(projectDir, '*.alx', SearchOption.AllDirectories)
    -?@() !(ignorePattern defined) || !$_.ToLower().Contains(ignorePattern);

if ((srcFiles #!) == 0) {
    printError('No scripts found');
    exit(0xbad02);
}

printSuccess('Found ~Green~{0}~R~ script(s)', srcFiles #!);

srcFiles->@(srcFile) {
    var cs = exports.compileFile(ns, srcFile);

    if (cs == null) {
        ret null;
    }

    var dstFile =
        Path.ChangeExtension(srcFile, 'cs')
        |> Path.GetFileName
        @Path.Combine(outputDir);

    printInfo('Writing compiled class to ~Green~{0}~R~', dstFile);
    cs @File.WriteAllText(dstFile);
};

printSuccess('Done');