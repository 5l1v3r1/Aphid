#'std';
#'xml';

var tup = @(set, delim) set +> @(x, y) x + delim + y;

var language = {
    pluralize: @(word) ($(word $!) 'y': word.Trim('y') + 'ies', word + 's'),
    
    capitalize: @(word)
        !string.IsNullOrEmpty(word) ?
            (word.Remove(1).ToUpper() + (word.Length > 1 ? word.Substring(1) : '')) :
            word, 
};

var htmlId = @() tup($args, '_');
_sel = macro(@(name) { (@() _val(name) ) });
_val = macro(@(name) { $_.name() ^! @.Value });
var docXmlFile = 'C:\\source\\Aphid\\aphid.xml';
var docHtmlFile = Path.ChangeExtension(docXmlFile, 'html');

var doc = xdoc
    .open(docXmlFile)
    .Root
    .MemberDoc()
    -& _sel(Filename)
    -> (@(f) ({
        file: $_.Key,
        members: $_
            -& _sel(Type)
            -> (@(m) ({
                type: $_.Key |> language.pluralize,
                typeMembers: $_
                    -\ _sel(Path)
                    -> (@(t) ({
                        id: htmlId(file, _val(Path)),
                        path: _val(Path),
                        params: t.MethodParamDoc(),
                        signature:
                            path +
                            (params != null ?
                                '({0})' :: [ tup(params->_sel(Name), ', ') ] :
                                ''),
                        returns: _val(Returns),
                        summary: _val(Summary),
                        example: _val(Example),
                    })),
            }))
    }));

var title = 'Aphid Programming Language Reference';

var generateHtml = @(codeDoc) { %>
    <html>
        <head><title><%= title %></title></head>
        <body>
            <h1><%= title %></h1>
            <hr />
            <% doc |> generateTableOfContents; %>
            <hr />
            <% doc |> generateBody; %>
            <hr />
        </body>
    </html>
<% };

var generateTableOfContents = @(codeDoc) { %>
    <h2>Table of Contents</h2>
    <ul>
        <% codeDoc->@(f){ %>
        <li>
            <b><%= f.file %></b>
            <ul>
                <% f.members->@(m) { %>
                <li>
                    <%= m.type %>
                    <ul>
                        <% m.typeMembers->@(t) { %>
                        <li><a href="#<%= t.id %>"><code><%= t.signature %></code></a></li>
                        <% }; %>
                    </ul>
                </li>
                <% }; %>
            </ul>
        </li>
        <% }; %>
    </ul>
<% };

_prop = macro(@(name) {
    if (t.name != null) { 
        _kvp(quote(name) |> language.capitalize, t.name)
    }
});

_kvp = macro(@(key, value) { %>
    <table>
        <tr><td><b><%= key %></b></td></tr>
        <tr><td><%= value %></td></tr>
    </table>
<% });

var generateBody = @(codeDoc) { %>
    <!--<h2>Headers</h2>-->
    <% codeDoc->@(f){ %>
        <h2><%= f.file %> Header</h2>
        <% f.members->@(m) { %>
            <h3><%= m.type %></h3>
            <% m.typeMembers->@(t) {
                _kvp(
                    ($(m.type) 'Functions': 'Signature', 'Path'),
                    @{ %><code id="<%= t.id %>"><%= t.signature %></code><% }());
                
                _prop(summary);
                
                if (t.params != null) { %>
                    <table>
                        <tr><td><b>Parameters</b></td></tr>
                        <% t.params->@(p) { %>
                            <tr>
                                <td><i><%= _val(Name) %></i></td>
                                <td><%= _val(Description) %></td>
                            </tr>                        
                        <% }; %>
                    </table>
                <% }

                _prop(returns);
                
                if (t.example != null) {
                    _kvp('Example', @{ %><pre><code><%= t.example %></code></pre><% }());
                }
            }; %>
            <hr />
        <% }; %>
    <% }; %>
<% };

var html;

using (aphid.Out = new StringWriter()) {
    doc |> generateHtml;
    aphid.Out.Flush();
    html = aphid.Out.ToString();
}

html @File.WriteAllText(docHtmlFile);
html |> Console.WriteLine;
