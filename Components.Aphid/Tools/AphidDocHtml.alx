#'std';
#'xml';
using Components.Aphid.UI;
var highlighter = new AphidSyntaxHighlighter();

var highlight = @(code) code
    |> highlighter.Highlight
    ->(@(h) format(
        '<span style="color: rgb({0},{1},{2})">{3}</span>',
        h.ForegroundRgb[0],
        h.ForegroundRgb[1],
        h.ForegroundRgb[2],
        h.Text))
    +> @(x, y) x + y;

var language = {
    pluralize: @(word) ($(word $!) 'y': word.Trim('y') + 'ies', word + 's'),
    
    capitalize: @(word)
        !string.IsNullOrEmpty(word) ?
            (word.Remove(1).ToUpper() + (word.Length > 1 ? word.Substring(1) : '')) :
            word, 
};

var tup = @(set, delim) set +> @(x, y) x + delim + y;
var htmlId = @() tup($args, '_');
_sel = macro(@(name) { (@(x) _val2(name) ) });
_val2 = macro(@(name) { x.name() ^! @.Value });
_val = macro(@(name) { $_.name() ^! @.Value });
var docXmlFile = 'C:\\source\\Aphid\\Components.Aphid\\Aphid.xml';
var docHtmlFile = Path.ChangeExtension(docXmlFile, 'html');

xdoc
    .open(docXmlFile) |> dump;

var doc = xdoc
    .open(docXmlFile)
    .Root
    .MemberDoc()
    -& _sel(Filename)
    -> (@(f) ({
        file: f.Key,
        members: f
            -& _sel(Type)
            -> (@(m) ({
                type: $_.Key |> language.pluralize,
                typeMembers: $_
                    -\ _sel(Path)
                    -> (@(t) ({
                        id: htmlId(file, _val(Path)),
                        path: _val(Path),
                        params: t.MethodParamDoc(),
                        signature:
                            path +
                            (params != null ?
                                '({0})' :: [ tup(params->_sel(Name), ', ') ] :
                                type == 'Functions' ? '()' :
                                ''),
                        returns: _val(Returns),
                        summary: _val(Summary),
                        example: _val(Example),
                    })),
            }))
    }));

var title = 'Aphid Programming Language Reference';
// dump(doc);

var generateHtml = @(codeDoc) { %>
    <html>
        <head>
            <style>
                table
                {
                    border: solid 1px black;
                    width: 100%;
                    margin-bottom: 6px;
                }

                table th
                {
                    text-align: left;
                    background-color: #C0C0C0;
                    padding:2px;
                }

                table td
                {
                    background-color: #E0E0E0;
                    padding:1px;
                }
            </style>
            <title><%= title %></title>
        </head>
        <body>
            <h1><%= title %></h1>
            <hr />
            <% codeDoc |> generateTableOfContents; %>
            <hr />
            <% codeDoc |> generateBody; %>
            <hr />
        </body>
    </html>
<% };

var generateTableOfContents = @(codeDoc) { %>
    <h2>Table of Contents</h2>
    <ul>
        <% codeDoc->@(f){ %>
        <li>
            <b><%= f.file %></b>
            <ul>
                <% f.members->@(m) { %>
                <li>
                    <%= m.type %>
                    <ul>
                        <% m.typeMembers->@(t) { %>
                        <li><a href="#<%= t.id %>"><code><%= t.signature %></code></a></li>
                        <% }; %>
                    </ul>
                </li>
                <% }; %>
            </ul>
        </li>
        <% }; %>
    </ul>
<% };

_prop = macro(@(name) {
    if (t.name != null) { 
        _kvp(quote(name) |> language.capitalize, t.name)
    }
});

_kvp = macro(@(key, value) { %>
    <table>
        <tr><th><b><%= key %></b></th></tr>
        <tr><td><%= value %></td></tr>
    </table>
<% });

_kvp2 = macro(@(key, value) { %>
    <table>
        <tr><th style=" background-color:rgb(5,5,5)"><%= key %></th></tr>
        <tr><td><%= value %></td></tr>
    </table>
    <br />
<% });

var generateBody = @(codeDoc) { %>
    <!--<h2>Headers</h2>-->
    <% codeDoc->@(f){ %>
        <% f.members->@(m) { %>
            <table><tr><th><h2 style="margin-bottom:0px;"><%= f.file %> <%= m.type %></h2></th></tr></table>
            <br />
            <% m.typeMembers->@(t) {
                _kvp2(
                    @{ %>
                        <code style="font-size:130%;" id="<%= t.id %>">
                            <%= t.signature |> highlight %>
                        </code>
                    <% }(),
                    @{ 
                            _prop(summary);
                    
                            if (t.params != null) { %>
                                <table style="margin-bottom:2px;">
                                    <tr><th colspan="2"><b>Parameters</b></th></tr>
                                    <% t.params->@(p) { %>
                                        <tr>
                                            <td style="width:1px;"><i><%= _val(Name) %></i></td>
                                            <td><%= _val(Description) %></td>
                                        </tr>                        
                                    <% }; %>
                                </table>
                            <% }

                            _prop(returns);
                            
                            if (t.example != null) {
                                _kvp('Example', @{ %><pre style="background: rgb(10,10,10); padding: 10px;"><code><%= t.example |> highlight %></code></pre><% }());
                            }
                        %>
                    <% }());
            }; %>
            <hr />
        <% }; %>
    <% }; %>
<% };

var html;

using (aphid.Out = new StringWriter()) {
    doc |> generateHtml;
    aphid.Out.Flush();
    html = aphid.Out.ToString();
}

html @File.WriteAllText(docHtmlFile);
html |> Console.WriteLine;
