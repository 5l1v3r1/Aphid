#'Std';
#'Data\\Xml';
#'Html\\Tags';
using Components.Aphid.TypeSystem;
using Components.Aphid.UI;
using System.Collections.Generic;

@ -: (source, fmt) source->@format(fmt);
@ :+ (source, fmt) source -: fmt @join('');

@mutate(@{
    if (isStatement &&
        expression.isId() &&
        expression.noAttrs() &&
        html.tags.Contains(expression.id().ToString())) {
        hasChanged = true;
        
        ret ('@{{ %><%= "<{0} />" %><% }}()' :: [ expression.id() ]) |> parseExp;
    } else if (expression.isBinOp() && expression.isOp(getToken('%|'))) {
        hasChanged = true;
        var body = new List[AphidExpression]();
        expression.rhs() |> ast.return |> body.Add;
        
        ret ast.binOp(
            expression.lhs(),
            getToken('%\\'),
            new FunctionExpression(new List[AphidExpression](), body));
    }
})
<| @{
print('marker');

var docTitle = 'Aphid Programming Language Reference';
var docXmlFile = 'C:\\source\\Aphid\\Components.Aphid\\Aphid.xml';
var docHtmlFile = Path.ChangeExtension(docXmlFile, 'html');
var highlighter = new AphidSyntaxHighlighter();

var highlight = @(code) code
    |> highlighter.Highlight
    ->(@(h) format(
        '<span style="color: rgb({0},{1},{2})">{3}</span>',
        h.ForegroundRgb[0],
        h.ForegroundRgb[1],
        h.ForegroundRgb[2],
        h.Text))
    +> @(x, y) x + y;

var language = {
    pluralize: @(word) ($(word $!) 'y': word.Trim('y') + 'ies', word + 's'),
    
    capitalize: @(word)
        !string.IsNullOrEmpty(word) ?
            (word.Remove(1).ToUpper() + (word.Length > 1 ? word.Substring(1) : '')) :
            word, 
};

var tup = @(set, delim) set +> @(x, y) x + delim + y;
var htmlId = @() tup($args, '_');
_sel = macro(@(name) { (@(x) _val2(name) ) });
_val2 = macro(@(name) { x.name() ^! @.Value });
_val = macro(@(name) { $_.name() ^! @.Value });

var doc = xdoc
    .open(docXmlFile)
    .Root
    .MemberDoc()
    -& _sel(Filename)
    -> (@(f) ({
        file: f.Key,
        members: f
            -& _sel(Type)
            -> (@(m) ({
                type: $_.Key |> language.pluralize,
                typeMembers: $_
                    -\ _sel(Path)
                    -> (@(t) ({
                        id: htmlId(file, _val(Path)),
                        path: _val(Path),
                        params: t.MethodParamDoc(),
                        signature:
                            path +
                            (params != null ?
                                '({0})' :: [ tup(params->_sel(Name), ', ') ] :
                                type == 'Functions' ? '()' :
                                ''),
                        returns: _val(Returns),
                        summary: _val(Summary),
                        example: _val(Example),
                    })),
            }))
    }));

var generateHtml = @(codeDoc) {
    html %| @{
        head %| @{
            style %| @{ %>
                h2 { margin-bottom: 0px; }
                table { border: solid 1px black; width: 100%; margin-bottom: 6px; }
                table th { text-align: left; background-color: #C0C0C0; padding:2px; }
                table td { background-color: #E0E0E0; padding:1px; }
                
                .param {
                    text-align: left;
                    background-color: #D0D0D0;
                    padding: 1px 2px 1px 2px;
                    font-weight: 550;
                    font-style: italic;
                    width: 1px;
                }
            <% };

            title %| docTitle;
        };

        body %| @{
            h1 %| docTitle;
            hr;
            codeDoc |> generateTableOfContents;
            hr;
            codeDoc |> generateBody;
            hr;
        };
    };
};

@ %\ (html, inner) {
    using Components.Aphid.TypeSystem;
    using System.Collections.Generics;
    using System.Text;

    var tagId = getCall().lhs();
    print(getCall());
    
    if (tagId == null || !tagId.isId()) {
        fatal('Invalid %| parameters.');
    }
    
    var t = new List[string]();
    [ tagId.attrIds(), [ tagId.id() ] ]->@() $_->t.Add;
    var result;

    %><%= t :+ '<{0}>'
    %><%= $((result = inner()).GetType())
        List[AphidObject], null: '',
        AphidFunction: result() ?? '',
        result
    %><%= (t |> Enumerable.Reverse) :+ '</{0}>'
    %><%
};

var generateTableOfContents = @(codeDoc) {
    h2 %| 'Table of Contents';
    ul %| (codeDoc->@(f){
        li %| @{
            b %| f.file;
            ul %| (f.members->@(m) {
                li %| @{
                    span %| m.type;
                    ul %| (m.typeMembers->(@(t) li a code %| t.signature));
                }
            })
        }
    })
};

_prop = macro(@(name) {
    if (t.name != null) { 
        _kvp(quote(name) |> language.capitalize, t.name)
    }
});

_kvp = macro(@(key, value) { %>
    <table>
        <tr><th><b><%= key %></b></th></tr>
        <tr><td><%= value %></td></tr>
    </table>
<% });

_kvp2 = macro(@(key, value) { %>
    <table>
        <tr><th style=" background-color:rgb(5,5,5)"><%= key %></th></tr>
        <tr><td><%= value %></td></tr>
    </table>
    <br />
<% });

var generateBody = @(codeDoc) {
    codeDoc->@(f){
        f.members->@(m) {
            table tr th h2 %| ('{0} {1}' :: [ f.file, m.type ]);
            br;
            m.typeMembers->@(t) {
                _kvp2(
                    @{ %>
                        <code style="font-size:130%;" id="<%= t.id %>">
                            <%= t.signature |> highlight %>
                        </code>
                    <% }(),
                    @{ 
                        _prop(summary);
                
                        if (t.params != null) { %>
                            <table style="margin-bottom:2px;">
                                <tr><th colspan="2"><b>Parameters</b></th></tr>
                                <% t.params->@(p) { %>
                                    <tr>
                                        <th class="param"><%= _val(Name) %></th>
                                        <td><%= _val(Description) %></td>
                                    </tr>                        
                                <% }; %>
                            </table>
                        <% }

                        _prop(returns);
                        
                        if (t.example != null) {
                            _kvp(
                                'Example',
                                @{ %><pre style="background: rgb(10,10,10); padding: 10px;"><%
                                    code %| (t.example |> highlight);
                                %></pre> <% }());
                        }
                    }());
            };

            hr;
        };
    };
};

var html;

using (aphid.Out = new StringWriter()) {
    doc |> generateHtml;
    aphid.Out.Flush();
    html = aphid.Out.ToString();
}

html @File.WriteAllText(docHtmlFile);
html |> Console.WriteLine;
using System.Diagnostics;
Process.Start('file:///C:/source/aphid/components.aphid/aphid.html');
}.Body
|> evalAst;