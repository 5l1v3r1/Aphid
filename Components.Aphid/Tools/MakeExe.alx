//#'DebugDeploy';
#'Std';
#'Meta';
#'IL';
#'Nuget';
using Components.Aphid.Interpreter;
using System.IO;
using System.Diagnostics;
using System.Reflection;
using System.Reflection.Emit;
head('MakeExe');

var args = Environment.GetCommandLineArgs()->@() $_;

if (args.Count >= 1) {
    var n = Path.GetFileName(args[0]).ToLower();

    var names = [ '', '.exe' ]
        -<@(ext) [ '', '64', '.vshost', '.binaryTrace' ]
        ->@() 'aphid' + $_ + ext
        @() $_.ToLower();
    
    if (names =? @== n) {
        args = args @aq.skip(2);
    } else {
        args = args @aq.skip(1);
    }
}

var usage = 'MakeExe [script name] {exe name}';

if (args.Count == 0) {
    print(usage);
    exit(0);
} else if (args.Count != 1 && args.Count != 2) {
    fatal('Invalid arguments, expected {0}', usage);
}

var script = args[0];

var asmName = args.Count == 2 ?
    args[1] :
    Path.ChangeExtension(args[0], 'exe');

var pdbFile = Path.ChangeExtension(asmName, 'pdb');
[ pdbFile, asmName ]-?File.Exists->File.Delete;

var properties = {
    name: asmName |> Path.GetFileName,
    path: asmName,
    title: asmName |> Path.GetFileNameWithoutExtension,
    version: '1.0.0.0',
    showConsole: true,
};

printInfo('Parsing script');
var scriptAst = script |> AphidParser.ParseFile;

if (scriptAst.Count >= 0 && scriptAst[0].GetType() == ObjectExpression) {
    var p = scriptAst[0] |> evalNode;
    p |> keys -> @() properties.{$_} = p.{$_};
}

printInfo('Starting preprocessing');
var partialOpMutator = new PartialOperatorMutator();
var macroMutator = new AphidMacroMutator();
var directiveMutator = new AphidPreprocessorDirectiveMutator();
var includeMutator = new IncludeMutator();

var srcAst = scriptAst
    |> partialOpMutator.MutateRecursively
    |> macroMutator.MutateRecursively
    |> directiveMutator.MutateRecursively
    |> includeMutator.MutateRecursively;

printSuccess('Preprocessing complete');

printInfo('Creating projecting into bytecode', byteCodeFile);
var byteCode = srcAst |> AphidByteCode.Encode;
printSuccess('Projected into ~Cyan~{0:n0}~R~ byte stream', byteCode.Length);
properties.streams = { ByteCode: new MemoryStream(byteCode) };
printInfo('Assembly attributes:');
properties |> keys -> @() print('    [{0}] ~White~{1}~R~', $_, properties.{$_});
print();

printInfo('Creating module {0} for {1}', asmName, script);

importOpcodes();
@{
    var e = $_.Emit;
    e(Ldc_I4_1);
    e(Newobj, AphidInterpreter.GetConstructor([ bool ]));
    e(Ldstr, 'ByteCode');
    e(Call, AphidByteCode.GetMethod('DecodeResource'));
    e(Call, AphidInterpreter.GetMethod('Interpret', [ List[AphidExpression] ]));
    e(Ret);
}
@createProgram(properties);

installPackage('ilmerge');

var ilMergeBins = Directory.GetFiles(
    '.\\',
    'ilmerge.exe',
    SearchOption.AllDirectories);

if (ilMergeBins.Length == 0) {
    printError('Could not find ilmerge.exe');
    exit(0xbad81);
}

var ilMergeBin = ilMergeBins[0] |> Path.GetFullPath;
load ilMergeBin;
using ILMerging;

var il = new ILMerge();
il.SetInputAssemblies([ properties.path, AphidObject.Assembly.Location ]);
il.OutputFile = properties.path |> Path.GetFullPath;
printInfo('Merging into final binary ~Cyan~{0}~R~', il.OutputFile);
il.Merge();

printSuccess('Done');