#'DebugDeploy';
#'Std';
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
// Console.Clear();

////////////////////////////////////////////////////////////////
// uint32 | Id
//  uint8 | Enter/Eeave = 1/0
//    var | Name
// 
// _framePerformanceBinaryWriter.Write(id);
// _framePerformanceBinaryWriter.Write(true);
// _framePerformanceBinaryWriter.Write(frame.Name);


// _framePerformanceBinaryWriter.Write(id);
// _framePerformanceBinaryWriter.Write(false);
// _framePerformanceBinaryWriter.Write(tup.Item1);
// _framePerformanceBinaryWriter.Write(tup.Item2.ElapsedTicks);
// _framePerformanceBinaryWriter.Write(tup.Item2.ElapsedMilliseconds);

class of long FrameProfile {
    int ThreadId,
    string Name,
    Hits,
    Ticks,
    TicksExclusive,
    ArrayList ChildFrames,
};

var dumpFrameJson = @{
    #'Serialization';
    $_ |> toJson |> Cli.StyleEscape |> print;
};

var dumpFrame = @{
    #'Serialization';
    $_ |> toJson |> Cli.StyleEscape |> print;
};

var cliArgs = getCommandLineArgs();



cliArgs.Length == 2 !! 'aphid ParseBinaryPerformanceTrace [file]';
!File.Exists(var trace = cliArgs[2]) !! ('Could not find trace ~Yellow~{0}~R~' :: trace);

//var trace = 'C:\\source\\Aphid\\Aphid\\bin\\Debug\\AphidFramePerformance.ea27e90b-43c3-4f26-aa7b-7bc3781508d0.dat';
var nameReader = new BinaryReader(trace + '.names' |> File.OpenRead);
var names = new List[string]();

while (nameReader.BaseStream.Position < nameReader.BaseStream.Length) {
    nameReader.ReadString() |> names.Add;
}

var reader = new BinaryReader(trace |> File.OpenRead);
var profileHeader = reader.ReadString();
print(profileHeader);
// var header = r.ReadString();

// reader.dir();
// reader.BaseStream.dir();

var threadStacks = {};
var root = new List[FrameProfile]();
var parsed = 0;
var frames = new List[FrameProfile]();
var frameTotals = {};
var frameTotalsList = new List[FrameProfile]();

using System.Threading;

var t = new Thread(@{
    var lastPct = 0;
    while (true) {
        Thread.Sleep(500);

        try {
        var pos = reader.BaseStream.Position;
        var len = reader.BaseStream.Length;
        var remaining = len - pos;
        var pct = Math.Round(pos / len * 100, 2);
        printInfo('{0:n0}/{1:n0} {2}% {3}% inc', pos, len, pct, pct - lastPct);
        lastPct = pct;

        if (pos == len) {
            printSuccess('Done');
            break;
        }
        } catch (e) {
            break;
        }
    }
});

t.Start();

var s = reader.BaseStream;
var f = FrameProfile;
var len = s.Length;

while (s.Position < len) {
    
    var id = reader.ReadInt32();
    var key = id.ToString();

    var stack = threadStacks.{key} defined ? 
        threadStacks.{key} :
        threadStacks.{key} = new Stack[FrameProfile]();

    var enter = reader.ReadBoolean();    

    if (enter) {
        var name = names[reader.ReadInt32()];
        var frame = new FrameProfile();
        frame.ThreadId = id;
        frame.Name = 'Frame$' + name;
        frame.ChildFrames = new ArrayList();
        
        if (stack.Count > 0) {
            stack.Peek().ChildFrames.Add(frame);
        } else {
            root.Add(frame);
        }

        stack.Push(frame);
        frames.Add(frame);
        // frame.Name |> Cli.StyleEscape |> print;
    } else {
        var curFrame = stack.Pop();
        curFrame.Ticks = reader.ReadInt64();
        var arr = curFrame.ChildFrames;


        if (arr.Count == 0) {
            curFrame.TicksExclusive = curFrame.Ticks;            
        } else {
            _exclusive = macro(@(n) { curFrame.n - (arr->@.n+>@(x, y) x + y) });
            curFrame.TicksExclusive = _exclusive(Ticks);            
        }

        if (frameTotals.{curFrame.Name} defined) {
            var t = frameTotals.{curFrame.Name};
            t.Hits = t.Hits + 1;
            t.Ticks += curFrame.Ticks;
            t.TicksExclusive += curFrame.TicksExclusive;            
        } else {
            var t = new FrameProfile();
            t.Hits = 1;
            t.Name = curFrame.Name;
            t.Ticks = curFrame.Ticks;
            t.TicksExclusive = curFrame.TicksExclusive;            
            frameTotals.{curFrame.Name} = t;
            frameTotalsList.Add(t);
        }
    }
}

var printFrame = @(frame, indent) print(
    (indent defined ? indent : '') +
    ($_.Hits != 0 ? 
        'Name: {0}, Ticks: {1:n0}, Exclusive: {2:n0}, Hits: {3:n0}' :
        'Name: {0}, Ticks: {1:n0}, Exclusive: {2:n0}'),
    $_.Name.Replace('\r', '').Replace('\n', '\\n'),
    $_.Ticks,
    $_.TicksExclusive,
    $_.Hits);

[ [ 'inclusive ticks', @.Ticks ], [ 'exclusive ticks', @.TicksExclusive ] ]->@{
    head('Top 100 slowest by ' + $_[0]);

    var ordered = frameTotalsList-/$_[1];
    Enumerable.Take(ordered, 100)->printFrame;

    print();
};

print('Done');
reader.Dispose();

var dumpTree = @(root, indent) {
    var i = indent defined ? indent : '';
    root->@{
        printFrame($_, i);
        dumpTree($_.ChildFrames, i + '  ');
    };
};


// root |> dumpTree;
    