using Components.Aphid.Tests.Integration;
using Components.Aphid.Tests.Integration.Shared;

var global = this;
var lastException = null;
var success;
var fault;
var getTestKeys;
var runTests;
var isStandalone;
var tryAction;

if (!(global.childCreated defined )) {
    global.childCreated = false;
    global.all = { success: 0, total: 0 };
}

@{
    #'Std';
    #'Meta';
    #'IL';

    using Components.Aphid.UI;

    getTestKeys = @{
        var s = global;
        var k = s |> keys |> Enumerable.ToList;
        var i = 'tests' |> k.IndexOf;

        if (i == -1) {
            ret [];
        }

        ret Enumerable.Skip(k, i + 1)
            -? (@(x)
                !x.StartsWith('$') &&
                s.{x} != null &&
                s.{x}.GetType() == AphidFunction)
            |> Enumerable.ToArray;
    };

    _try = macro(@(expectSuccess) {
        @() @{
            if (expectSuccess) {
                $_();
                ret true;
            } else {
                var actual = isThrow(@{
                    $_();
                });

                ret actual != null;
            }
        }
    });

    success = _try(true);
    fault = _try(false);

    using System.IO;
    var exe = getExe();

    isStandalone =
        !String.IsNullOrEmpty(exe) &&
        Path.GetFileName(exe).ToLower().StartsWith('aphid');

    tryAction = @AphidCli.TryAction(this.{'$aphid'}, null);

    if (isStandalone) {
        if (!global.childCreated) {
            head('Aphid Test Framework');
        }

        var makeAssert = @(f) f @> @() $_ ? $_ : throw new InvalidOperationException();
        global.isTrue = makeAssert(@== true);
        global.isFalse = makeAssert(@== false);
        global.isFoo = makeAssert(@== 'foo');
        global.is9 = makeAssert(@== 9);
        global.isNull = makeAssert(@== null);
        global.notNull = makeAssert(@!= null);
        
        global.isThrow = @(f) {
            try f();
            catch ret true;
            
            throw string.Format(
                'Expected exception from test function: {0}',
                f);
        };

        var args = getCommandLineArgs();

        if (!global.childCreated &&
            args.Length == 2 &&
            Path.GetFileName(args[1].ToLower()) == 'test.alx') {
            global.childCreated = true;
            
            _i = macro(@(n) {
                Path
                    .GetFileNameWithoutExtension($_)
                    .ToLower() != n
            });

            args[1]
            |> Path.GetFullPath
            |> Path.GetDirectoryName
            |> Directory.GetFiles
            -?(@()
                _i('test') &&
                _i('testbase') &&
                _i('aoptest') &&
                $_.EndsWith('.alx'))
            ->(@()
                $_.Replace('\\', '\\\\')
                @format('@{{ #"{0}"; print() }}')
                evalExp)
            ->@()$_();

            var failed = global.all.success < global.all.total;
            print();
            subhead('Final Results');
            (failed ? printCriticalError : printSuccess)(
                'Finished running all tests, ~{0}~{1:n0}/{2:n0}~R~ succeeded',
                failed ? 'Red' : 'Green',
                global.all.success,
                global.all.total);
        } else {
            this.{'$frames'}[0].Scope.{'$block'}.AddRange(@{ runTests(global) });
        }
    }

    runTests = @(scope){
        printQuery('Searching for tests');
        var testKeys = getTestKeys(scope);

        printSuccess('Found ~Cyan~{0}~R~ tests', testKeys.Length);
        //printSuccess('Found ~Cyan~{0}~R~ tests:\r\n', testKeys.Length);
        //testKeys->@format('  ~Cyan~-~R~ {0}') @join('\r\n') |> print;

        printInfo('Executing tests');
        var testResults = testKeys->@(k) {
            var r = { key: k, func: scope.{k}, result: null, success: true };

            printQuery('Running test ~Magenta~{0}~R~', k);
            //Todo: output exception details when tryAction returns false.
            if (!tryAction(@{
                r.result = r.func();

                if (Environment.UserInteractive && !Console.IsOutputRedirected) {
                    var len = format('Running test {0}', k).Length;
                    Console.CursorTop = Console.CursorTop - 1;
                    Console.CursorLeft = len + 4;
                }

                if (r.result == null || r.result.GetType() != bool || r.result) {
                    print(' -> ~Green~Successful~R~');
                } else {
                    r.success = false;
                    print(' -> ~Red~Unsuccessful~R~');
                    printError('Failed with return value: ~Yellow~{0}~R~', r.result |> serialize);

                    if (global.lastException != null) {
                        print(
                            '    Underlying exception: ~Yellow~{0}~R~',
                            global.lastException.message);

                            //global.lastException.exception |> print;
                    }
                }
            })) {
                r.success = false;
                r.error = AphidCli.LastException;
            }

            ret r;
        };

        var failed = testResults=?@()!$_.success;
        var success = testResults-?(@.success) |> Enumerable.Count;
        global.all.success += success;
        global.all.total += testResults.Count;

        (failed ? printCriticalError : printSuccess)(
            'Done, ~{0}~{1:n0}/{2:n0}~R~ tests succeeded',
            failed ? 'Red' : 'Green',
            success,
            testResults |> Enumerable.Count);
    };
}();