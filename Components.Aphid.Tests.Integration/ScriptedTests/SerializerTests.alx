#'Std';

root = this;
foo = { bar: 9, test: 'foo', f: @(x) x * x };

var roundTrip = serialize @> deserialize;
var s = aphid.Serializer;

var p = @(quote, noFuncs, noSpecials) @{
    s.QuoteToStringResults = quote;
    s.IgnoreFunctions = noFuncs;
    s.IgnoreSpecialVariables = noFuncs;
};

c = macro(@(name, init, obj, check){
    name begin;
    @{ init; obj |> roundTrip @{ check |> isTrue } }
});

r = macro(@(obj, check) {
    c(noQuote, p(false, false, false), obj, check);
    c(quote, p(true, false, false), obj, check);
    c(funcs, p(true, true, false), obj, check);
    c(specials, p(true, false, true), obj, check);
    c(funcsAndSpecials, p(true, true, true), obj, check);
});

#'AopTest';

serialize group;
r(1, $_ == 1);
r('test', $_ == 'test');
r(false, !$_);
r(null, $_ == null);
r(root, true);
r(root, $_.foo defined);
r(root, $_.foo.bar defined);
r(root, $_.foo.bar == 9);
r(root, $_.foo.test == 'foo');

fault;

@{ #'Std'; this |> serialize @+ '~!%$' |> deserialize };
r(1, $_ == 2);
r('test', $_ == 'testa');
r(false, $_);
r(null, $_ != null);
r(root, false);
r(root, $_.foo2 defined);
r(root, $_.foo.bar2 defined);
r(root, $_.foo.bar == 10);
r(root, $_.foo.test == 'foo2'); 