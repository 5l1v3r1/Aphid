using System;
using System.Collections.Generic;

#'AopTest';
explicit generics group;

isTrue;
@{ var l = new List[string](); l != null && l.Count == 0 };
@{ var l = new List[string](); l.Add('foo'); l != null && l.Count == 1 && l[0] == 'foo' };
@{ List[string] == List[string] };
@{ List[string] != List[int] };
@{ var d = new Dictionary[string, string](); d.Add('foo', 'bar'); d.get_Item('foo') == 'bar' };
@{ var d = new Dictionary[string, List[string]](); d.Add('foo', new List[string]()); d.get_Item('foo').Add('bar'); d.get_Item('foo')[0] == 'bar' };
@{ Dictionary[string, string] == Dictionary[string, string] };
@{ Dictionary[string, string] != Dictionary[int, string] };
@{ Dictionary[Dictionary[string, string], string] == Dictionary[Dictionary[string, string], string] };
@{ Dictionary[Dictionary[string, string], string] != Dictionary[string, Dictionary[string, string]] };
@{ Dictionary[Dictionary[string, string], List[string]] == Dictionary[Dictionary[string, string], List[string]] };
@{ Dictionary[Dictionary[string, string], List[string]] != Dictionary[List[string], Dictionary[string, string]] };

fault;
@{ var l = new List[string](); l[0] == 'foo' };
@{ new List[BadType]() != null; };
@{ var d = new Dictionary[string, string](); d.Add('foo', 'bar'); d.get_Item('bar') == 'bar' };
@{ new Dictionary[string]() != null };
@{ new Dictionary[BadType, string]() != null };
@{ new Dictionary[string, BadType]() != null };