#'Std';

var root = this;
var foo = {
    bar: 9,
    test: 'foo',
    singleQuote: "'",
    doubleQuote: '"',
    backslash: '\\',
    backslashAlpha: '\\a',
    lazy: Enumerable.Take(1..10, 4),
    '\\': 'foo',
    f: @(x) x * x
};

var roundTrip = serialize @> deserialize;
//var s = aphid.Serializer;

var p = @(doubleQuote, quoteKeys, noSpecials, noLazyLists) {
    var s = new AphidSerializer(aphid);
    s.UseDoubleQuotes = doubleQuote;
    s.AlwaysQuoteKeys = quoteKeys;
    s.QuoteToStringResults = true;
    s.IgnoreFunctions = true;
    s.IgnoreSpecialVariables = noSpecials;
    s.IgnoreLazyLists = noLazyLists;

    ret s;
};

c = macro(@(name, init, obj, check){
    name begin;
    @{ var s = init; obj | s.Serialize | s.Deserialize @{ check |> isTrue } }

});

r = macro(@(obj, check) {
    c(withSingleQuoteWithSpecials, p(false, false, false, false), obj, check);
    c(withDoubleQuoteWithSpecials, p(true, false, false, false), obj, check);
    c(withDoubleQuoteAlwaysQuoteKeysWithSpecials, p(true, true, false, false), obj, check);
    c(withSingleQuoteWithoutSpecials, p(false, false, true, false), obj, check);
    c(withDoubleQuoteWithoutSpecials, p(true, false, true, false), obj, check);
    c(withSingleQuoteWithSpecialsWithoutLazyLists, p(false, false, false, true), obj, check);
    c(withDoubleQuoteWithSpecialsWithoutLazyLists, p(true, false, false, true), obj, check);
    c(withDoubleQuoteAlwaysQuoteKeysWithSpecialsWithoutLazyLists, p(true, true, false, true), obj, check);
    c(withSingleQuoteWithoutSpecialsWithoutLazyLists, p(false, false, true, true), obj, check);
    c(withDoubleQuoteWithoutSpecialsWithoutLazyLists, p(true, false, true, true), obj, check);
});

#'Testing\\AopTest';

serialize group;
r(1, $_ == 1);
r('test', $_ == 'test');
r(false, !$_);
r(null, $_ == null);
r(root, true);
r(root, $_.foo defined);
r(root, $_.foo.bar defined);
r(root, $_.foo.bar == 9);
r(root, $_.foo.test == 'foo');
r(root, $_.foo.singleQuote == "'");
r(root, $_.foo.doubleQuote == '"');
r(root, $_.foo.backslash == '\\');
r(root, $_.foo.backslashAlpha == '\\a');
r(root, s.IgnoreLazyLists || ($_.foo.lazy #!) == 4);

fault;

@{ #'Std'; this |> serialize @+ '~!%$' |> deserialize };
r(1, $_ == 2);
r('test', $_ == 'testa');
r(false, $_);
r(null, $_ != null);
r(root, false);

r(root, $_.foo defined == false);
r(root, $_.foo.bar defined == false);
r(root, $_.foo.bar != 9);
r(root, $_.foo.test != 'foo');
r(root, $_.foo.singleQuote != "'");
r(root, $_.foo.doubleQuote != '"');
r(root, $_.foo.backslash != '\\');
r(root, $_.foo.backslashAlpha != '\\a');

r(root, $_.foo2 defined);
r(root, $_.foo.bar2 defined);
r(root, $_.foo.bar == 10);
r(root, $_.foo.test == 'foo2');
r(root, $_.foo.singleQuote == "A");
r(root, $_.foo.doubleQuote == 'A');
r(root, $_.foo.backslash == 'A');
r(root, $_.foo.backslashAlpha == 'A');